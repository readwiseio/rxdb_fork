{"version":3,"file":"upstream.js","names":["_rxjs","require","_rxStorageHelper","_utils","_checkpoint","_conflicts","_helper","_metaInstance","startReplicationUpstream","state","input","initialCheckpoint","upstream","checkpointDoc","getLastCheckpointDoc","setCheckpoint","replicationHandler","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","openTasks","sub","forkInstance","changeStream","pipe","filter","eventBulk","context","downstreamBulkWriteFlag","subscribe","stats","forkChangeStreamEmit","push","task","time","waitBeforePersist","firstValueFrom","events","canceled","unsubscribe","getValue","checkpointQueue","lastCheckpoint","promises","upResult","getChangedDocumentsSince","pushBatchSize","documents","length","stackCheckpoints","checkpoint","persistToMaster","ensureNotFalsy","resolvedPromises","Promise","all","hadConflicts","find","r","firstSyncDone","next","active","docs","taskWithTime","shift","appendToArray","map","documentData","promise","PROMISE_RESOLVE_FALSE","persistenceQueue","nonPersistedFromMaster","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","assumedMasterState","getAssumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","writeDocToDocState","assumedMasterDoc","metaDocument","isResolvedConflict","_rev","conflictHandler","realMasterState","newDocumentState","isEqual","parseRevision","height","_meta","identifier","undefined","getMetaWriteRow","writeRowsArray","values","conflictIds","Set","conflictsById","writeBatches","batchArray","writeBatch","masterWriteResult","masterWrite","conflictDoc","id","add","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","hadConflictWrites","size","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","writeToMasterRow","resolveConflictError","resolved","resolvedConflicts","output","previous","document","resolvedDoc","persistToMasterConflictWrites","forkWriteResult","useMetaWrites","success","catch","unhandledError","error"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport {\n    appendToArray,\n    batchArray,\n    ensureNotFalsy,\n    parseRevision,\n    PROMISE_RESOLVE_FALSE\n} from '../plugins/utils';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { resolveConflictError } from './conflicts';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For initial replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport async function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n\n    if (\n        state.input.initialCheckpoint &&\n        state.input.initialCheckpoint.upstream\n    ) {\n        const checkpointDoc = await getLastCheckpointDoc(state, 'up');\n        if (!checkpointDoc) {\n            await setCheckpoint(\n                state,\n                'up',\n                state.input.initialCheckpoint.upstream\n            );\n        }\n    }\n\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(() => {\n        return upstreamInitialSync().then(() => {\n            processTasks();\n        });\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    const sub = state.input.forkInstance.changeStream()\n        .pipe(\n            filter(eventBulk => eventBulk.context !== state.downstreamBulkWriteFlag)\n        ).subscribe(eventBulk => {\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (state.input.waitBeforePersist) {\n                return state.input.waitBeforePersist()\n                    .then(() => processTasks());\n            } else {\n                return processTasks();\n            }\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n            const upResult = await state.input.forkInstance.getChangedDocumentsSince(\n                state.input.pushBatchSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            promises.push(\n                persistToMaster(\n                    upResult.documents,\n                    ensureNotFalsy(lastCheckpoint)\n                )\n            );\n        }\n\n        /**\n         * If we had conflicts during the initial sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upstream these new writes.\n         */\n        const resolvedPromises = await Promise.all(promises);\n        const hadConflicts = resolvedPromises.find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (\n            !state.firstSyncDone.up.getValue() &&\n            !state.events.canceled.getValue()\n        ) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(() => {\n            /**\n             * Merge/filter all open tasks\n             */\n            const docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the initial sync fetching\n                 * has run, we can ignore the task because the initial sync already processed\n                 * these documents.\n                 */\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n                appendToArray(\n                    docs,\n                    taskWithTime.task.events.map(r => {\n                        return r.documentData as any;\n                    })\n                );\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            const promise = docs.length === 0 ? PROMISE_RESOLVE_FALSE : persistToMaster(\n                docs,\n                checkpoint\n            );\n            return promise.then(() => {\n                if (openTasks.length === 0) {\n                    state.events.active.up.next(false);\n                } else {\n                    processTasks();\n                }\n            });\n        });\n    }\n\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistent list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            if (docIds.length === 0) {\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData);\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        (\n                            assumedMasterDoc &&\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                            &&\n                            (await state.input.conflictHandler({\n                                realMasterState: assumedMasterDoc.docData,\n                                newDocumentState: docData\n                            }, 'upstream-check-if-equal')).isEqual\n                        )\n                        ||\n                        /**\n                         * If the master works with _rev fields,\n                         * we use that to check if our current doc state\n                         * is different from the assumedMasterDoc.\n                         */\n                        (\n                            assumedMasterDoc &&\n                            (assumedMasterDoc.docData as any)._rev &&\n                            parseRevision(fullDocData._rev).height === fullDocData._meta[state.input.identifier]\n                        )\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                return false;\n            }\n\n\n            const writeRowsArray = Object.values(writeRowsToMaster);\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n\n            /**\n             * To always respect the push.batchSize,\n             * we have to split the write rows into batches\n             * to ensure that replicationHandler.masterWrite() is never\n             * called with more documents than what the batchSize limits.\n             */\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\n            await Promise.all(\n                writeBatches.map(async (writeBatch) => {\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\n                    masterWriteResult.forEach(conflictDoc => {\n                        const id = (conflictDoc as any)[state.primaryPath];\n                        conflictIds.add(id);\n                        conflictsById[id] = conflictDoc;\n                    });\n                })\n            );\n\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    useWriteRowsToMeta,\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            return resolveConflictError(\n                                state,\n                                input,\n                                forkStateById[docId]\n                            ).then(resolved => {\n                                if (resolved) {\n                                    state.events.resolvedConflicts.next({\n                                        input,\n                                        output: resolved.output\n                                    });\n                                    conflictWriteFork.push({\n                                        previous: forkStateById[docId],\n                                        document: resolved.resolvedDoc\n                                    });\n                                    const assumedMasterDoc = assumedMasterState[docId];\n                                    conflictWriteMeta[docId] = getMetaWriteRow(\n                                        state,\n                                        ensureNotFalsy(realMasterState),\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                        resolved.resolvedDoc._rev\n                                    );\n                                }\n                            });\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n                    /**\n                     * Errors in the forkWriteResult must not be handled\n                     * because they have been caused by a write to the forkInstance\n                     * in between which will anyway trigger a new upstream cycle\n                     * that will then resolved the conflict again.\n                     */\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n                    Object\n                        .keys(forkWriteResult.success)\n                        .forEach((docId) => {\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            useMetaWrites,\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parallel checkpoint writes,\n             * we have to use a queue.\n             */\n            state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                state,\n                'up',\n                useCheckpoint\n            ));\n\n            return hadConflictWrites;\n        }).catch(unhandledError => {\n            state.events.error.next(unhandledError);\n            return false;\n        });\n\n        return persistenceQueue;\n    }\n}\n\n"],"mappings":"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"}