{"version":3,"file":"rx-query.js","names":["_rxjs","require","_operators","_index","_rxError","_hooks","_eventReduce","_queryCache","_rxQueryHelper","_rxQuerySingleResult","_queryPlanner","_eventReduceJs","_rxStorageHelper","_queryCount","newQueryID","RESTORE_QUERY_UPDATE_DRIFT","RESTORE_QUERY_MAX_DOCS_CHANGED","RESTORE_QUERY_MAX_TIME_AGO","exports","RxQueryBase","op","mangoQuery","collection","other","id","_execOverDatabaseCount","_creationTime","now","_lastEnsureEqual","uncached","refCount$","BehaviorSubject","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_limitBufferSize","_limitBufferResults","_persistentQueryCacheResult","undefined","_persistentQueryCacheResultLwt","_ensureEqualQueue","PROMISE_RESOLVE_FALSE","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_proto","prototype","_setResultData","newResultData","newRxError","database","name","RxQuerySingleResult","Map","Array","from","values","newQueryResult","length","_execOverDatabase","preparedQuery","getPreparedQuery","result","storageInstance","count","mode","allowSlowCount","queryObj","ids","ensureNotFalsy","selector","$in","ret","mustBeQueried","forEach","docData","_docCache","getLatestDocumentDataIfExists","_deleted","doc","getCachedRxDocument","set","push","docs","findDocumentsById","primary","docsPromise","queryCollection","then","exec","throwIfMissing","query","_ensureEqual","useResult","getValue","toString","stringObj","sortObject","value","JSON","stringify","persistentQueryId","String","hashFunction","hookInput","rxQuery","normalizeMangoQuery","jsonSchema","$eq","index","unshift","limit","runPluginHooks","prepareQuery","doesDocumentDataMatch","queryMatcher","remove","isArray","Promise","all","map","incrementalRemove","runQueryUpdateFunction","asRxQuery","update","_updateObj","pluginMissing","patch","incrementalPatch","modify","mutationFunction","incrementalModify","where","_queryObj","sort","_params","skip","_amount","enableLimitBuffer","bufferSize","console","error","enablePersistentQueryCache","backend","_persistentQueryCacheBackend","_persistentQueryCacheLoaded","_restoreQueryCacheFromPersistedState","getItem","log","persistedQueryCacheIds","Set","limitBufferIds","startsWith","add","replace","time","lwt","Number","documents","changedDocs","getChangedDocumentsSince","Math","floor","changedDocIds","d","docIdsWeNeedToFetch","filter","has","otherPotentialMatchingDocs","_queryCollectionByIds","docsData","concat","normalizedMangoQuery","sortComparator","getSortComparator","Infinity","lastValidIndex","findLastIndex","slice","unchangedItemsMayNowBeInResults","size","pastLimitItems","finalResults","_changeEventBuffer","counter","timeEnd","_createClass2","default","key","get","_$","results$","$","pipe","changeEvent","isLocal","startWith","mergeMap","shareReplay","RXJS_SHARE_REPLAY_DEFAULTS","distinctUntilChanged","prev","curr","merge","reactivity","getReactivityFactory","fromObservable","normalizedQuery","overwriteGetterForCaching","getQueryMatcher","tunnelQueryCache","getByQuery","createRxQuery","triggerCacheReplacement","_isResultsInSync","currentLatestEventNumber","getCounter","awaitBeforeReads","fn","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","_loop","cE","find","documentId","previousCount","newCount","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","calculateNewResults","runFullQueryAgain","changed","newResults","areRxDocumentArraysEqual","returnValue","updatePersistentQueryCache","docsKeys","idsToPersist","RX_META_LWT_MINIMUM","setItem","docResults","docIds","docId","docsMap","Object","mutateableQuery","queryPlan","getQueryPlan","docsFromStorage","appendToArray","fromStorageList","queryResult","splice","keys","r","isRxQuery","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    appendToArray,\n    areRxDocumentArraysEqual,\n    now,\n    overwriteGetterForCaching,\n    pluginMissing,\n    PROMISE_RESOLVE_FALSE, RX_META_LWT_MINIMUM,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    sortObject\n} from './plugins/utils/index.ts';\nimport {\n    newRxError\n} from './rx-error.ts';\nimport {\n    runPluginHooks\n} from './hooks.ts';\nimport type {\n    MangoQuery,\n    PreparedQuery,\n    QueryMatcher,\n    RxChangeEvent,\n    RxCollection,\n    RxDocument,\n    RxDocumentData,\n    RxJsonSchema,\n    FilledMangoQuery,\n    ModifyFunction,\n    RxDocumentWriteData,\n    RxQuery,\n    RxQueryOP, MangoQuerySelector, MangoQuerySortPart\n} from './types/index.d.ts';\nimport { calculateNewResults } from './event-reduce.ts';\nimport { triggerCacheReplacement } from './query-cache.ts';\nimport {\n    getQueryMatcher,\n    getSortComparator,\n    normalizeMangoQuery,\n    runQueryUpdateFunction\n\n} from './rx-query-helper.ts';\nimport { RxQuerySingleResult } from './rx-query-single-result.ts';\nimport { getQueryPlan } from './query-planner.ts';\nimport { ensureNotFalsy } from 'event-reduce-js';\nimport { getChangedDocumentsSince } from './rx-storage-helper.ts';\n\n\nexport interface QueryCacheBackend {\n    getItem<T extends string | string[]>(key: string): Promise<T | null>;\n    setItem<T extends string | string[]>(key: string, value: T): Promise<T>;\n}\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\n// allow changes to be 100ms older than the actual lwt value\nconst RESTORE_QUERY_UPDATE_DRIFT = 100;\n\n// 5000 seems like a sane number where re-executing the query will be easier than trying to restore\nconst RESTORE_QUERY_MAX_DOCS_CHANGED = 5000;\n\n// If a query was persisted more than a week ago, just re-execute it\nexport const RESTORE_QUERY_MAX_TIME_AGO = 7 * 24 * 60 * 60 * 1000;\n\nexport class RxQueryBase<\n    RxDocType,\n    RxQueryResult,\n    OrmMethods = {},\n    Reactivity = unknown,\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string | string[];\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: RxQuerySingleResult<RxDocType> | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery<RxDocType>>,\n        public collection: RxCollection<RxDocType>,\n        // used by some plugins\n        public other: any = {}\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): Observable<RxQueryResult> {\n        if (!this._$) {\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    return ensureNotFalsy(result).getValue();\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n    get $$(): Reactivity {\n        const reactivity = this.collection.database.getReactivityFactory();\n        return reactivity.fromObservable(\n            this.$,\n            undefined,\n            this.collection.database\n        ) as any;\n    }\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    // TODO do we still need these properties?\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    // Fields used for the Limit Buffer when enabled:\n    public _limitBufferSize: number | null = null;\n    public _limitBufferResults: RxDocumentData<RxDocType>[] | null = null;\n\n    // Fields used for the persistent query cache when enabled:\n    public _persistentQueryCacheResult?: string[] | string = undefined;\n    public _persistentQueryCacheResultLwt?: string = undefined; // lwt = latest write time\n    public _persistentQueryCacheLoaded?: Promise<void>;\n    public _persistentQueryCacheBackend?: QueryCacheBackend;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from the storage\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocType>[] | number | Map<string, RxDocumentData<RxDocType>>): void {\n        if (typeof newResultData === 'undefined') {\n            throw newRxError('QU18', {\n                database: this.collection.database.name,\n                collection: this.collection.name\n            });\n        }\n        if (typeof newResultData === 'number') {\n            this._result = new RxQuerySingleResult<RxDocType>(\n                this as any,\n                [],\n                newResultData\n            );\n            return;\n        } else if (newResultData instanceof Map) {\n            newResultData = Array.from((newResultData as Map<string, RxDocumentData<RxDocType>>).values());\n        }\n\n        const newQueryResult = new RxQuerySingleResult<RxDocType>(\n            this as any,\n            newResultData,\n            newResultData.length\n        );\n        this._result = newQueryResult;\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    async _execOverDatabase(): Promise<RxDocumentData<RxDocType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            const result = await this.collection.storageInstance.count(preparedQuery);\n            if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                throw newRxError('QU14', {\n                    collection: this.collection,\n                    queryObj: this.mangoQuery\n                });\n            } else {\n                return result.count;\n            }\n        }\n\n        if (this.op === 'findByIds') {\n            const ids: string[] = ensureNotFalsy(this.mangoQuery.selector as any)[this.collection.schema.primaryPath].$in;\n            const ret = new Map<string, RxDocument<RxDocType>>();\n            const mustBeQueried: string[] = [];\n            // first try to fill from docCache\n            ids.forEach(id => {\n                const docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n                if (docData) {\n                    if (!docData._deleted) {\n                        const doc = this.collection._docCache.getCachedRxDocument(docData);\n                        ret.set(id, doc);\n                    }\n                } else {\n                    mustBeQueried.push(id);\n                }\n            });\n            // everything which was not in docCache must be fetched from the storage\n            if (mustBeQueried.length > 0) {\n                const docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n                docs.forEach(docData => {\n                    const doc = this.collection._docCache.getCachedRxDocument(docData);\n                    ret.set(doc.primary, doc);\n                });\n            }\n            return ret as any;\n        }\n\n\n        const docsPromise = queryCollection<RxDocType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocType, OrmMethods, Reactivity>>;\n    public exec(): Promise<RxQueryResult>;\n    public async exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        await _ensureEqual(this as any);\n        const useResult = ensureNotFalsy(this._result);\n        return useResult.getValue(throwIfMissing);\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const schema = this.collection.schema.jsonSchema;\n        const normalizedQuery = normalizeMangoQuery(\n            this.collection.schema.jsonSchema,\n            this.mangoQuery\n        );\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            getQueryMatcher(\n                schema,\n                normalizedQuery\n            ) as any\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj);\n        this.toString = () => value;\n        return value;\n    }\n\n    persistentQueryId() {\n        return String(this.collection.database.hashFunction(this.toString()));\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                this.mangoQuery\n            )\n        };\n\n        (hookInput.mangoQuery.selector as any)._deleted = { $eq: false };\n        if (hookInput.mangoQuery.index) {\n            hookInput.mangoQuery.index.unshift('_deleted');\n        }\n\n        if (this._limitBufferSize !== null && hookInput.mangoQuery.limit) {\n            hookInput.mangoQuery.limit = hookInput.mangoQuery.limit + this._limitBufferSize;\n        }\n\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery as any\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        return this\n            .exec()\n            .then(docs => {\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            });\n    }\n    incrementalRemove(): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.incrementalRemove(),\n        );\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n    patch(patch: Partial<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.patch(patch),\n        );\n    }\n    incrementalPatch(patch: Partial<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.incrementalPatch(patch),\n        );\n    }\n    modify(mutationFunction: ModifyFunction<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.modify(mutationFunction),\n        );\n    }\n    incrementalModify(mutationFunction: ModifyFunction<RxDocType>): Promise<RxQueryResult> {\n        return runQueryUpdateFunction(\n            this.asRxQuery,\n            (doc) => doc.incrementalModify(mutationFunction),\n        );\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocType> | keyof RxDocType | string): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocType>): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n\n    enableLimitBuffer(bufferSize: number) {\n        if (this._limitBufferSize !== null) {\n            // Limit buffer has already been enabled, do nothing:\n            return this;\n        }\n        if (this._lastExecStart !== 0) {\n            console.error('Can\\'t use limit buffer if query has already executed');\n            return this;\n        }\n        if (this.mangoQuery.skip || !this.mangoQuery.limit) {\n            console.error('Right now, limit buffer only works on non-skip, limit queries.');\n            return this;\n        }\n        this._limitBufferSize = bufferSize;\n        return this;\n    }\n\n    enablePersistentQueryCache(backend: QueryCacheBackend) {\n        if (this._persistentQueryCacheBackend) {\n            // We've already tried to enable the query cache\n            return this;\n        }\n        this._persistentQueryCacheBackend = backend;\n        this._persistentQueryCacheLoaded = this._restoreQueryCacheFromPersistedState();\n        return this;\n    }\n\n    private async _restoreQueryCacheFromPersistedState() {\n        if (!this._persistentQueryCacheBackend) {\n            // no cache backend provided, do nothing\n            return;\n        }\n        if (this._persistentQueryCacheResult) {\n            // we already restored the cache once, no need to run twice\n            return;\n        }\n        if (this.mangoQuery.skip || this.op === 'count') {\n            console.error('The persistent query cache only works on non-skip, non-count queries.');\n            return;\n        }\n\n        // First, check if there are any query results persisted:\n        const persistentQueryId = this.persistentQueryId();\n        const value = await this._persistentQueryCacheBackend.getItem<string[] | string>(`qc:${persistentQueryId}`);\n        if (!value || !Array.isArray(value) || value.length === 0) {\n            // eslint-disable-next-line no-console\n            console.log(`no persistent query cache found in the backend, returning early ${this.toString()}`);\n            return;\n        }\n\n        // If there are persisted ids, create our two Sets of ids from the cache:\n        const persistedQueryCacheIds = new Set<string>();\n        const limitBufferIds = new Set<string>();\n\n        for (const id of value) {\n            if (id.startsWith('lb-')) {\n                limitBufferIds.add(id.replace('lb-', ''));\n            } else {\n                persistedQueryCacheIds.add(id);\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.time(`Restoring persistent querycache ${this.toString()}`);\n\n        // Next, pull the lwt from the cache:\n        // TODO: if lwt is too old, should we just give up here? What if there are too many changedDocs?\n        const lwt = (await this._persistentQueryCacheBackend.getItem(`qc:${persistentQueryId}:lwt`)) as string | null;\n        if (!lwt) {\n            return;\n        }\n\n        // If the query was persisted too long ago, just re-execute it.\n        if (now() - Number(lwt) > RESTORE_QUERY_MAX_TIME_AGO) {\n            return;\n        }\n\n        const primaryPath = this.collection.schema.primaryPath;\n\n        const {documents: changedDocs} = await getChangedDocumentsSince(this.collection.storageInstance,\n          RESTORE_QUERY_MAX_DOCS_CHANGED,\n          // make sure we remove the monotonic clock (xxx.01, xxx.02) from the lwt timestamp to avoid issues with\n          // lookups in indices (dexie)\n          {id: '', lwt: Math.floor(Number(lwt)) - RESTORE_QUERY_UPDATE_DRIFT}\n        );\n\n        // If too many docs have changed, just give up and re-execute the query\n        if (changedDocs.length === RESTORE_QUERY_MAX_DOCS_CHANGED) {\n            return;\n        }\n\n        const changedDocIds = new Set<string>(changedDocs.map((d) => d[primaryPath] as string));\n\n        const docIdsWeNeedToFetch = [...persistedQueryCacheIds, ...limitBufferIds].filter((id) => !changedDocIds.has(id));\n\n        // We use _queryCollectionByIds to fetch the remaining docs we need efficiently, pulling\n        // from query cache if we can (and the storageInstance by ids if we can't):\n        const otherPotentialMatchingDocs: RxDocumentData<RxDocType>[] = [];\n        await _queryCollectionByIds(this as any, otherPotentialMatchingDocs, docIdsWeNeedToFetch);\n\n        // Now that we have all potential documents, we just filter (in-memory) the ones that still match our query:\n        let docsData: RxDocumentData<RxDocType>[] = [];\n        for (const doc of changedDocs.concat(otherPotentialMatchingDocs)) {\n            if (this.doesDocumentDataMatch(doc)) {\n                docsData.push(doc);\n            }\n        }\n\n        // Sort the documents by the query's sort field:\n        const normalizedMangoQuery = normalizeMangoQuery<RxDocType>(\n          this.collection.schema.jsonSchema,\n          this.mangoQuery\n        );\n        const sortComparator = getSortComparator(this.collection.schema.jsonSchema, normalizedMangoQuery);\n        const limit = normalizedMangoQuery.limit ? normalizedMangoQuery.limit : Infinity;\n        docsData = docsData.sort(sortComparator);\n\n        // We know for sure that all persisted and limit buffer ids (and changed docs before them) are in the correct\n        // result set. And we can't be sure about any past that point. So cut it off there:\n        const lastValidIndex = docsData.findLastIndex((d) => limitBufferIds.has(d[primaryPath] as string) || persistedQueryCacheIds.has(d[primaryPath] as string));\n        docsData = docsData.slice(0, lastValidIndex + 1);\n\n        // Now this is the trickiest part.\n        // If we somehow have fewer docs than the limit of our query\n        // (and this wasn't the case because before persistence)\n        // then there is no way for us to know the correct results, and we re-exec:\n        const unchangedItemsMayNowBeInResults = (\n            this.mangoQuery.limit &&\n            docsData.length < this.mangoQuery.limit &&\n            persistedQueryCacheIds.size >= this.mangoQuery.limit\n        );\n        if (unchangedItemsMayNowBeInResults) {\n            return;\n        }\n\n        // Our finalResults are the actual results of this query, and pastLimitItems are any remaining matching\n        // documents we have left over (past the limit).\n        const pastLimitItems = docsData.slice(limit);\n        const finalResults = docsData.slice(0, limit);\n\n        // If there are still items past the first LIMIT items, try to restore the limit buffer with them:\n        if (limitBufferIds.size && pastLimitItems.length > 0) {\n            this._limitBufferResults = pastLimitItems;\n        } else {\n            this._limitBufferResults = [];\n        }\n\n        // Finally, set the query's results to what we've pulled from disk:\n        this._lastEnsureEqual = now();\n        this._latestChangeEvent = this.collection._changeEventBuffer.counter;\n        this._setResultData(finalResults);\n\n        // eslint-disable-next-line no-console\n        console.timeEnd(`Restoring persistent querycache ${this.toString()}`);\n    }\n}\n\n\nexport function _getDefaultQuery<RxDocType>(): MangoQuery<RxDocType> {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery<RxDocType>(\n    op: RxQueryOP,\n    queryObj: MangoQuery<RxDocType>,\n    collection: RxCollection<RxDocType>,\n    other?: any\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection,\n        other\n    });\n\n    let ret = new RxQueryBase<RxDocType, any>(op, queryObj, collection, other);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    // TODO: clear persistent query cache as well\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase<any, any>): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.getCounter();\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nasync function _ensureEqual(rxQuery: RxQueryBase<any, any>): Promise<boolean> {\n    if (rxQuery.collection.awaitBeforeReads.size > 0) {\n        await Promise.all(Array.from(rxQuery.collection.awaitBeforeReads).map(fn => fn()));\n    }\n\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return false;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nasync function __ensureEqual<RxDocType>(rxQuery: RxQueryBase<RxDocType, any>): Promise<boolean> {\n    await rxQuery._persistentQueryCacheLoaded;\n\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.getCounter();\n\n            const runChangeEvents: RxChangeEvent<RxDocType>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery._limitBufferResults !== null) {\n                // Check if any item in our limit buffer was modified by a change event\n                for (const cE of runChangeEvents) {\n                    if (rxQuery._limitBufferResults.find((doc) => doc[rxQuery.collection.schema.primaryPath] === cE.documentId)) {\n                        // If so, the limit buffer is potential invalid -- let's just blow it up\n                        // TODO: could we instead update the documents in the limit buffer?\n                        rxQuery._limitBufferResults = null;\n                        break;\n                    }\n                }\n            }\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n\n                /**\n                 * The RxStorage is defined to always first emit events and then return\n                 * on bulkWrite() calls. So here we have to use the counter AFTER the execOverDatabase()\n                 * has been run, not the one from before.\n                 */\n                rxQuery._latestChangeEvent = rxQuery.collection._changeEventBuffer.getCounter();\n\n                // A count query needs a different has-changed check.\n                if (typeof newResultData === 'number') {\n                    if (\n                        !rxQuery._result ||\n                        newResultData !== rxQuery._result.count\n                    ) {\n                        ret = true;\n                        rxQuery._setResultData(newResultData as any);\n                    }\n                    return ret;\n                }\n                if (\n                    !rxQuery._result ||\n                    !areRxDocumentArraysEqual(\n                        rxQuery.collection.schema.primaryPath,\n                        newResultData,\n                        rxQuery._result.docsData\n                    )\n                ) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            })\n            .then(async (returnValue) => {\n                await updatePersistentQueryCache(rxQuery);\n                return returnValue;\n            });\n    }\n\n    return ret; // true if results have changed\n}\n\n\nasync function updatePersistentQueryCache<RxDocType>(rxQuery: RxQueryBase<RxDocType, any>) {\n    if (!rxQuery._persistentQueryCacheBackend) {\n        return;\n    }\n\n    const backend = rxQuery._persistentQueryCacheBackend;\n\n    const key = rxQuery.persistentQueryId();\n\n    // update _persistedQueryCacheResult\n    rxQuery._persistentQueryCacheResult = rxQuery._result?.docsKeys ?? [];\n\n    const idsToPersist = [...rxQuery._persistentQueryCacheResult];\n    if (rxQuery._limitBufferResults) {\n        rxQuery._limitBufferResults.forEach((d) => {\n            idsToPersist.push(`lb-${d[rxQuery.collection.schema.primaryPath]}`);\n        });\n    }\n    // eslint-disable-next-line no-console\n    console.time(`Query persistence: persisting results of ${JSON.stringify(rxQuery.mangoQuery)}`);\n    // persist query cache\n    const lwt = rxQuery._result?.time ?? RX_META_LWT_MINIMUM;\n\n    await Promise.all([\n        backend.setItem(`qc:${String(key)}`, idsToPersist),\n        backend.setItem(`qc:${String(key)}:lwt`, lwt.toString()),\n    ]);\n\n    // eslint-disable-next-line no-console\n    console.timeEnd(`Query persistence: persisting results of ${JSON.stringify(rxQuery.mangoQuery)}`);\n}\n\n\n// Refactored out of `queryCollection`: modifies the docResults array to fill it with data\nasync function _queryCollectionByIds<RxDocType>(rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType, any>, docResults: RxDocumentData<RxDocType>[], docIds: string[]) {\n    const collection = rxQuery.collection;\n    docIds = docIds.filter(docId => {\n        // first try to fill from docCache\n        const docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n        if (docData) {\n            if (!docData._deleted) {\n                docResults.push(docData);\n            }\n            return false;\n        } else {\n            return true;\n        }\n    });\n\n    // otherwise get from storage\n    if (docIds.length > 0) {\n        const docsMap = await collection.storageInstance.findDocumentsById(docIds, false);\n        Object.values(docsMap).forEach(docData => {\n            docResults.push(docData);\n        });\n    }\n}\n\n/**\n * @returns a format of the query that can be used with the storage\n * when calling RxStorageInstance().query()\n */\nexport function prepareQuery<RxDocType>(\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    mutateableQuery: FilledMangoQuery<RxDocType>\n): PreparedQuery<RxDocType> {\n    if (!mutateableQuery.sort) {\n        throw newRxError('SNH', {\n            query: mutateableQuery\n        });\n    }\n\n    /**\n     * Store the query plan together with the\n     * prepared query to save performance.\n     */\n    const queryPlan = getQueryPlan(\n        schema,\n        mutateableQuery\n    );\n\n    return {\n        query: mutateableQuery,\n        queryPlan\n    };\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensure findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType, any>\n): Promise<RxDocumentData<RxDocType>[]> {\n    await rxQuery._persistentQueryCacheLoaded;\n\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        if (Array.isArray(rxQuery.isFindOneByIdQuery)) {\n            let docIds = rxQuery.isFindOneByIdQuery;\n            docIds = docIds.filter(docId => {\n                // first try to fill from docCache\n                const docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n                if (docData) {\n                    if (!docData._deleted) {\n                        docs.push(docData);\n                    }\n                    return false;\n                } else {\n                    return true;\n                }\n            });\n            // otherwise get from storage\n            if (docIds.length > 0) {\n                const docsFromStorage = await collection.storageInstance.findDocumentsById(docIds, false);\n                appendToArray(docs, docsFromStorage);\n            }\n            await _queryCollectionByIds(rxQuery, docs, rxQuery.isFindOneByIdQuery);\n        } else {\n            const docId = rxQuery.isFindOneByIdQuery;\n\n            // first try to fill from docCache\n            let docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n            if (!docData) {\n                // otherwise get from storage\n                const fromStorageList = await collection.storageInstance.findDocumentsById([docId], false);\n                if (fromStorageList[0]) {\n                    docData = fromStorageList[0];\n                }\n            }\n            if (docData && !docData._deleted) {\n                docs.push(docData);\n            }\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        if (rxQuery._limitBufferSize !== null && rxQuery.mangoQuery.limit && queryResult.documents.length > rxQuery.mangoQuery.limit) {\n            // If there are more than query.limit results, we pull out our buffer items from the\n            // last rxQuery._limitBufferSize items of the results.\n            rxQuery._limitBufferResults = queryResult.documents.splice(rxQuery.mangoQuery.limit);\n        }\n        docs = queryResult.documents;\n    }\n    return docs;\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string | string[] {\n    // must have exactly one operator which must be $eq || $in\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        const value: any = query.selector[primaryPath];\n        if (typeof value === 'string') {\n            return value;\n        } else if (\n            Object.keys(value).length === 1 &&\n            typeof value.$eq === 'string'\n        ) {\n            return value.$eq;\n        }\n\n        // same with $in string arrays\n        if (\n            Object.keys(value).length === 1 &&\n            Array.isArray(value.$eq) &&\n            // must only contain strings\n            !(value.$eq as any[]).find(r => typeof r !== 'string')\n        ) {\n            return value.$eq;\n        }\n    }\n    return false;\n}\n\n\nexport function isRxQuery(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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","ignoreList":[]}