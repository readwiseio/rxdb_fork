{"version":3,"file":"downstream.js","names":["firstValueFrom","filter","newRxError","stackCheckpoints","appendToArray","createRevision","ensureNotFalsy","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","parseRevision","PROMISE_RESOLVE_FALSE","PROMISE_RESOLVE_VOID","getLastCheckpointDoc","setCheckpoint","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","startReplicationDownstream","state","input","initialCheckpoint","downstream","checkpointDoc","identifierHash","hashFunction","identifier","replicationHandler","timer","openTasks","addNewTask","task","stats","down","taskWithTime","time","push","streamQueue","then","useTasks","length","events","active","next","innerTaskWithTime","shift","lastTimeMasterChangesRequested","downstreamResyncOnce","downstreamProcessChanges","firstSyncDone","getValue","canceled","sub","masterChangeStream$","subscribe","masterChangeStreamEmit","pipe","unsubscribe","forkInstance","options","deferReplication","Promise","resolve","console","debug","collectionName","setTimeout","checkpointQueue","lastCheckpoint","promises","downResult","masterChangesSince","pullBatchSize","documents","checkpoint","persistFromMaster","all","timeEnd","tasks","docsOfAllTasks","forEach","Error","persistenceQueue","nonPersistedFromMaster","docs","docData","docId","primaryPath","downDocsById","useCheckpoint","docIds","Object","keys","writeRowsToFork","writeRowsToForkById","writeRowsToMeta","useMetaWriteRows","findDocumentsById","currentForkState","assumedMasterState","map","forkStateFullDoc","forkStateDocData","undefined","masterState","assumedMaster","metaDocument","isResolvedConflict","_rev","isAssumedMasterEqualToForkStatePromise","conflictHandler","realMasterState","newDocumentState","r","isEqual","isAssumedMasterEqualToForkState","_meta","height","areStatesExactlyEqualPromise","areStatesExactlyEqual","newForkState","assign","_attachments","nextRevisionHeight","forkWriteRow","previous","document","bulkWrite","downstreamBulkWriteFlag","forkWriteResult","success","processed","values","error","status","writeError","metaInstance","metaWriteResult","entries","id","catch","unhandledError"],"sources":["../../../src/replication-protocol/downstream.ts"],"sourcesContent":["import {\n    firstValueFrom,\n    filter\n} from 'rxjs';\nimport { newRxError } from '../rx-error';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    RxStorageInstanceReplicationState,\n    BulkWriteRow,\n    BulkWriteRowById,\n    RxStorageReplicationMeta,\n    RxDocumentData,\n    ById,\n    WithDeleted,\n    DocumentsWithCheckpoint\n} from '../types';\nimport {\n    appendToArray,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    parseRevision,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID\n} from '../plugins/utils';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all documents from the master to the fork.\n * The downstream has two operation modes\n * - Sync by iterating over the checkpoints via downstreamResyncOnce()\n * - Sync by listening to the changestream via downstreamProcessChanges()\n * We need this to be able to do initial syncs\n * and still can have fast event based sync when the client is not offline.\n */\nexport async function startReplicationDownstream<RxDocType, CheckpointType = any>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    if (\n        state.input.initialCheckpoint &&\n        state.input.initialCheckpoint.downstream\n    ) {\n        const checkpointDoc = await getLastCheckpointDoc(state, 'down');\n        if (!checkpointDoc) {\n            await setCheckpoint(\n                state,\n                'down',\n                state.input.initialCheckpoint.downstream\n            );\n        }\n    }\n\n    const identifierHash = state.input.hashFunction(state.input.identifier);\n    const replicationHandler = state.input.replicationHandler;\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n\n\n    type Task = DocumentsWithCheckpoint<RxDocType, any> | 'RESYNC';\n    type TaskWithTime = {\n        time: number;\n        task: Task;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    function addNewTask(task: Task): void {\n        state.stats.down.addNewTask = state.stats.down.addNewTask + 1;\n        const taskWithTime = {\n            time: timer++,\n            task\n        };\n        openTasks.push(taskWithTime);\n        state.streamQueue.down = state.streamQueue.down\n            .then(() => {\n                const useTasks: Task[] = [];\n                while (openTasks.length > 0) {\n                    state.events.active.down.next(true);\n                    const innerTaskWithTime = ensureNotFalsy(openTasks.shift());\n\n                    /**\n                     * If the task came in before the last time we started the pull\n                     * from the master, then we can drop the task.\n                     */\n                    if (innerTaskWithTime.time < lastTimeMasterChangesRequested) {\n                        continue;\n                    }\n\n                    if (innerTaskWithTime.task === 'RESYNC') {\n                        if (useTasks.length === 0) {\n                            useTasks.push(innerTaskWithTime.task);\n                            break;\n                        } else {\n                            break;\n                        }\n                    }\n\n                    useTasks.push(innerTaskWithTime.task);\n                }\n\n                if (useTasks.length === 0) return;\n\n                if (useTasks[0] === 'RESYNC') {\n                    return downstreamResyncOnce();\n                } else {\n                    return downstreamProcessChanges(useTasks);\n                }\n            }).then(() => {\n                state.events.active.down.next(false);\n                if (\n                    !state.firstSyncDone.down.getValue() &&\n                    !state.events.canceled.getValue()\n                ) {\n                    state.firstSyncDone.down.next(true);\n                }\n            });\n    }\n    addNewTask('RESYNC');\n\n    /**\n     * If a write on the master happens, we have to trigger the downstream.\n     */\n    const sub = replicationHandler\n        .masterChangeStream$\n        .subscribe((task: Task) => {\n            state.stats.down.masterChangeStreamEmit = state.stats.down.masterChangeStreamEmit + 1;\n            addNewTask(task);\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    /**\n     * For faster performance, we directly start each write\n     * and then await all writes at the end.\n     */\n    let lastTimeMasterChangesRequested: number = -1;\n    async function downstreamResyncOnce() {\n        if (state.input.forkInstance.options.deferReplication) {\n            await new Promise((resolve) => {\n                // eslint-disable-next-line no-console\n                console.debug(`RxDB: defer downstream replication for ${state.input.forkInstance.collectionName} by ${state.input.forkInstance.options.deferReplication}ms`);\n                setTimeout(resolve, state.input.forkInstance.options.deferReplication);\n            });\n        }\n        // eslint-disable-next-line no-console\n        console.time(`RxDB: downstream replication ${state.input.forkInstance.collectionName}`);\n        state.stats.down.downstreamResyncOnce = state.stats.down.downstreamResyncOnce + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'down'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            lastTimeMasterChangesRequested = timer++;\n            const downResult = await replicationHandler.masterChangesSince(\n                lastCheckpoint,\n                state.input.pullBatchSize\n            );\n\n            if (downResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, downResult.checkpoint]);\n\n            promises.push(\n                persistFromMaster(\n                    downResult.documents,\n                    lastCheckpoint\n                )\n            );\n\n            /**\n             * By definition we stop pull when the pulled documents\n             * do not fill up the pullBatchSize because we\n             * can assume that the remote has no more documents.\n             */\n            if (downResult.documents.length < state.input.pullBatchSize) {\n                break;\n            }\n\n        }\n        await Promise.all(promises);\n        // eslint-disable-next-line no-console\n        console.timeEnd(`RxDB: downstream replication ${state.input.forkInstance.collectionName}`);\n    }\n\n\n    function downstreamProcessChanges(tasks: Task[]) {\n        state.stats.down.downstreamProcessChanges = state.stats.down.downstreamProcessChanges + 1;\n        const docsOfAllTasks: WithDeleted<RxDocType>[] = [];\n        let lastCheckpoint: CheckpointType | undefined = null as any;\n\n        tasks.forEach(task => {\n            if (task === 'RESYNC') {\n                throw new Error('SNH');\n            }\n            appendToArray(docsOfAllTasks, task.documents);\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, task.checkpoint]);\n        });\n        return persistFromMaster(\n            docsOfAllTasks,\n            ensureNotFalsy(lastCheckpoint)\n        );\n    }\n\n\n    /**\n     * It can happen that the calls to masterChangesSince() or the changeStream()\n     * are way faster then how fast the documents can be persisted.\n     * Therefore we merge all incoming downResults into the nonPersistedFromMaster object\n     * and process them together if possible.\n     * This often bundles up single writes and improves performance\n     * by processing the documents in bulks.\n     */\n    let persistenceQueue = PROMISE_RESOLVE_VOID;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<WithDeleted<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    function persistFromMaster(\n        docs: WithDeleted<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<void> {\n        state.stats.down.persistFromMaster = state.stats.down.persistFromMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistent list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n        /**\n         * Run in the queue\n         * with all open documents from nonPersistedFromMaster.\n         */\n        persistenceQueue = persistenceQueue.then(() => {\n            const downDocsById: ById<WithDeleted<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(downDocsById);\n\n            if (\n                state.events.canceled.getValue() ||\n                docIds.length === 0\n            ) {\n                return PROMISE_RESOLVE_VOID;\n            }\n\n            const writeRowsToFork: BulkWriteRow<RxDocType>[] = [];\n            const writeRowsToForkById: ById<BulkWriteRow<RxDocType>> = {};\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const useMetaWriteRows: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n            return Promise.all([\n                state.input.forkInstance.findDocumentsById(docIds, true),\n                getAssumedMasterState(\n                    state,\n                    docIds\n                )\n            ]).then(([\n                currentForkState,\n                assumedMasterState\n            ]) => {\n                return Promise.all(\n                    docIds.map(async (docId) => {\n                        const forkStateFullDoc: RxDocumentData<RxDocType> | undefined = currentForkState[docId];\n                        const forkStateDocData: WithDeleted<RxDocType> | undefined = forkStateFullDoc ? writeDocToDocState(forkStateFullDoc) : undefined;\n                        const masterState = downDocsById[docId];\n                        const assumedMaster = assumedMasterState[docId];\n\n                        if (\n                            assumedMaster &&\n                            assumedMaster.metaDocument.isResolvedConflict === forkStateFullDoc._rev\n                        ) {\n                            /**\n                             * The current fork state represents a resolved conflict\n                             * that first must be send to the master in the upstream.\n                             * All conflicts are resolved by the upstream.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        const isAssumedMasterEqualToForkStatePromise = !assumedMaster || !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: assumedMaster.docData,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-0').then(r => r.isEqual);\n                        let isAssumedMasterEqualToForkState = await isAssumedMasterEqualToForkStatePromise;\n\n                        if (\n                            !isAssumedMasterEqualToForkState &&\n                            (\n                                assumedMaster &&\n                                (assumedMaster.docData as any)._rev &&\n                                forkStateFullDoc._meta[state.input.identifier] &&\n                                parseRevision(forkStateFullDoc._rev).height === forkStateFullDoc._meta[state.input.identifier]\n                            )\n                        ) {\n                            isAssumedMasterEqualToForkState = true;\n                        }\n                        if (\n                            (\n                                forkStateFullDoc &&\n                                assumedMaster &&\n                                isAssumedMasterEqualToForkState === false\n                            ) ||\n                            (\n                                forkStateFullDoc && !assumedMaster\n                            )\n                        ) {\n                            /**\n                             * We have a non-upstream-replicated\n                             * local write to the fork.\n                             * This means we ignore the downstream of this document\n                             * because anyway the upstream will first resolve the conflict.\n                             */\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n\n                        const areStatesExactlyEqualPromise = !forkStateDocData ?\n                            PROMISE_RESOLVE_FALSE :\n                            state.input.conflictHandler({\n                                realMasterState: masterState,\n                                newDocumentState: forkStateDocData\n                            }, 'downstream-check-if-equal-1').then(r => r.isEqual);\n                        const areStatesExactlyEqual = await areStatesExactlyEqualPromise;\n\n                        if (\n                            forkStateDocData &&\n                            areStatesExactlyEqual\n                        ) {\n                            /**\n                             * Document states are exactly equal.\n                             * This can happen when the replication is shut down\n                             * unexpected like when the user goes offline.\n                             *\n                             * Only when the assumedMaster is different from the forkState,\n                             * we have to patch the document in the meta instance.\n                             */\n                            if (\n                                !assumedMaster ||\n                                isAssumedMasterEqualToForkState === false\n                            ) {\n                                useMetaWriteRows.push(\n                                    getMetaWriteRow(\n                                        state,\n                                        forkStateDocData,\n                                        assumedMaster ? assumedMaster.metaDocument : undefined\n                                    )\n                                );\n                            }\n                            return PROMISE_RESOLVE_VOID;\n                        }\n\n                        /**\n                         * All other master states need to be written to the forkInstance\n                         * and metaInstance.\n                         */\n                        const newForkState = Object.assign(\n                            {},\n                            masterState,\n                            forkStateFullDoc ? {\n                                _meta: flatClone(forkStateFullDoc._meta),\n                                _attachments: {},\n                                _rev: getDefaultRevision()\n                            } : {\n                                _meta: getDefaultRxDocumentMeta(),\n                                _rev: getDefaultRevision(),\n                                _attachments: {}\n                            });\n                        /**\n                         * If the remote works with revisions,\n                         * we store the height of the next fork-state revision\n                         * inside of the documents meta data.\n                         * By doing so we can filter it out in the upstream\n                         * and detect the document as being equal to master or not.\n                         * This is used for example in the CouchDB replication plugin.\n                         */\n                        if ((masterState as any)._rev) {\n                            const nextRevisionHeight = !forkStateFullDoc ? 1 : parseRevision(forkStateFullDoc._rev).height + 1;\n                            newForkState._meta[state.input.identifier] = nextRevisionHeight;\n                        }\n\n                        const forkWriteRow = {\n                            previous: forkStateFullDoc,\n                            document: newForkState\n                        };\n\n                        forkWriteRow.document._rev = createRevision(\n                            identifierHash,\n                            forkWriteRow.previous\n                        );\n                        writeRowsToFork.push(forkWriteRow);\n                        writeRowsToForkById[docId] = forkWriteRow;\n                        writeRowsToMeta[docId] = getMetaWriteRow(\n                            state,\n                            masterState,\n                            assumedMaster ? assumedMaster.metaDocument : undefined\n                        );\n                    })\n                );\n            }).then(() => {\n                if (writeRowsToFork.length > 0) {\n                    return state.input.forkInstance.bulkWrite(\n                        writeRowsToFork,\n                        state.downstreamBulkWriteFlag\n                    ).then((forkWriteResult) => {\n                        Object.keys(forkWriteResult.success).forEach((docId) => {\n                            state.events.processed.down.next(writeRowsToForkById[docId]);\n                            useMetaWriteRows.push(writeRowsToMeta[docId]);\n                        });\n                        Object.values(forkWriteResult.error).forEach(error => {\n                            /**\n                             * We do not have to care about downstream conflict errors here\n                             * because on conflict, it will be solved locally and result in another write.\n                             */\n                            if (error.status === 409) {\n                                return;\n                            }\n                            // other non-conflict errors must be handled\n                            state.events.error.next(newRxError('RC_PULL', {\n                                writeError: error\n                            }));\n                        });\n                    });\n                }\n            }).then(() => {\n                if (useMetaWriteRows.length > 0) {\n                    return state.input.metaInstance.bulkWrite(\n                        useMetaWriteRows,\n                        'replication-down-write-meta'\n                    ).then(metaWriteResult => {\n                        Object\n                            .entries(metaWriteResult.error)\n                            .forEach(([docId, writeError]) => {\n                                state.events.error.next(newRxError('RC_PULL', {\n                                    id: docId,\n                                    writeError\n                                }));\n                            });\n                    });\n                }\n            }).then(() => {\n                /**\n                 * For better performance we do not await checkpoint writes,\n                 * but to ensure order on parallel checkpoint writes,\n                 * we have to use a queue.\n                 */\n                state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                    state,\n                    'down',\n                    useCheckpoint\n                ));\n            });\n        }).catch(unhandledError => state.events.error.next(unhandledError));\n        return persistenceQueue;\n    }\n}\n"],"mappings":"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"}