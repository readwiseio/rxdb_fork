{"version":3,"file":"rx-query.js","names":["BehaviorSubject","firstValueFrom","merge","mergeMap","filter","map","startWith","distinctUntilChanged","shareReplay","areRxDocumentArraysEqual","ensureNotFalsy","now","overwriteGetterForCaching","pluginMissing","PROMISE_RESOLVE_FALSE","RX_META_LWT_MINIMUM","RXJS_SHARE_REPLAY_DEFAULTS","sortObject","stringifyFilter","newRxError","runPluginHooks","calculateNewResults","triggerCacheReplacement","getQueryMatcher","getSortComparator","normalizeMangoQuery","_queryCount","newQueryID","RESTORE_QUERY_UPDATE_DRIFT","RESTORE_QUERY_MAX_DOCS_CHANGED","RESTORE_QUERY_MAX_TIME_AGO","RxQueryBase","op","mangoQuery","collection","other","id","_execOverDatabaseCount","_creationTime","_lastEnsureEqual","uncached","refCount$","_result","_latestChangeEvent","_lastExecStart","_lastExecEnd","_limitBufferSize","_limitBufferResults","_persistentQueryCacheResult","undefined","_persistentQueryCacheResultLwt","_ensureEqualQueue","_getDefaultQuery","isFindOneByIdQuery","schema","primaryPath","_proto","prototype","_setResultData","newResultData","docsData","docsKeys","docsMap","Map","docsDataMap","count","docs","time","Array","from","values","docData","_docCache","getCachedRxDocument","doc","set","primary","_data","push","length","_execOverDatabase","preparedQuery","getPreparedQuery","result","storageInstance","mode","database","allowSlowCount","queryObj","ids","selector","$in","ret","mustBeQueried","forEach","getLatestDocumentDataIfExists","_deleted","findDocumentsById","Object","docsPromise","queryCollection","then","exec","throwIfMissing","name","query","_ensureEqual","$","toString","stringObj","value","JSON","stringify","persistentQueryId","String","hashFunction","hookInput","rxQuery","jsonSchema","limit","storage","statics","prepareQuery","doesDocumentDataMatch","queryMatcher","remove","isArray","Promise","all","update","_updateObj","where","_queryObj","sort","_params","skip","_amount","enableLimitBuffer","bufferSize","console","error","enablePersistentQueryCache","backend","_persistentQueryCacheBackend","_persistentQueryCacheLoaded","_restoreQueryCacheFromPersistedState","getItem","log","persistedQueryCacheIds","Set","limitBufferIds","startsWith","add","replace","lwt","Number","documents","changedDocs","getChangedDocumentsSince","Math","floor","changedDocIds","d","docIdsWeNeedToFetch","has","otherPotentialMatchingDocs","_queryCollectionByIds","concat","normalizedMangoQuery","sortComparator","Infinity","lastValidIndex","findLastIndex","slice","unchangedItemsMayNowBeInResults","size","pastLimitItems","finalResults","_changeEventBuffer","counter","timeEnd","_createClass","key","get","_$","results$","pipe","changeEvent","isLocal","prev","curr","useResult","normalizedQuery","tunnelQueryCache","_queryCache","getByQuery","createRxQuery","_isResultsInSync","currentLatestEventNumber","asRxQuery","destroyed","__ensureEqual","mustReExec","missedChangeEvents","getFrom","runChangeEvents","reduceByLastOfDoc","_loop","cE","find","documentId","previousCount","newCount","didMatchBefore","previousDocumentData","doesMatchNow","documentData","eventReduceResult","runFullQueryAgain","changed","newResults","latestAfter","returnValue","updatePersistentQueryCache","idsToPersist","setItem","docResults","docIds","docId","hasOwnProperty","queryResult","splice","keys","$eq","r","isRxQuery","obj"],"sources":["../../src/rx-query.ts"],"sourcesContent":["import {\n    BehaviorSubject,\n    firstValueFrom,\n    Observable,\n    merge\n} from 'rxjs';\nimport {\n    mergeMap,\n    filter,\n    map,\n    startWith,\n    distinctUntilChanged,\n    shareReplay\n} from 'rxjs/operators';\nimport {\n    areRxDocumentArraysEqual,\n    ensureNotFalsy,\n    now,\n    overwriteGetterForCaching,\n    pluginMissing,\n    PROMISE_RESOLVE_FALSE, RX_META_LWT_MINIMUM,\n    RXJS_SHARE_REPLAY_DEFAULTS,\n    sortObject,\n    stringifyFilter\n} from './plugins/utils';\nimport {\n    newRxError\n} from './rx-error';\nimport {\n    runPluginHooks\n} from './hooks';\nimport type {\n    MangoQuery,\n    MangoQuerySelector,\n    MangoQuerySortPart,\n    PreparedQuery,\n    QueryMatcher,\n    RxChangeEvent,\n    RxCollection,\n    RxDocument,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxQuery,\n    RxQueryOP\n} from './types';\nimport { calculateNewResults } from './event-reduce';\nimport { triggerCacheReplacement } from './query-cache';\nimport { getQueryMatcher, getSortComparator, normalizeMangoQuery } from './rx-query-helper';\n\nexport interface QueryCacheBackend {\n    getItem<T extends string | string[]>(key: string): Promise<T | null>;\n    setItem<T extends string | string[]>(key: string, value: T): Promise<T>;\n}\n\nlet _queryCount = 0;\nconst newQueryID = function (): number {\n    return ++_queryCount;\n};\n\n// allow changes to be 100ms older than the actual lwt value\nconst RESTORE_QUERY_UPDATE_DRIFT = 100;\n\n// 5000 seems like a sane number where re-executing the query will be easier than trying to restore\nconst RESTORE_QUERY_MAX_DOCS_CHANGED = 5000;\n\n// If a query was persisted more than a week ago, just re-execute it\nexport const RESTORE_QUERY_MAX_TIME_AGO = 7 * 24 * 60 * 60 * 1000;\n\nexport class RxQueryBase<\n    RxDocType,\n    // TODO also pass DocMethods here\n    RxQueryResult = RxDocument<RxDocType>[] | RxDocument<RxDocType>\n> {\n\n    public id: number = newQueryID();\n\n    /**\n     * Some stats then are used for debugging and cache replacement policies\n     */\n    public _execOverDatabaseCount: number = 0;\n    public _creationTime = now();\n\n    // used in the query-cache to determine if the RxQuery can be cleaned up.\n    public _lastEnsureEqual = 0;\n\n    public uncached = false;\n\n    // used to count the subscribers to the query\n    public refCount$ = new BehaviorSubject(null);\n\n    public isFindOneByIdQuery: false | string | string[];\n\n\n    /**\n     * Contains the current result state\n     * or null if query has not run yet.\n     */\n    public _result: {\n        docsData: RxDocumentData<RxDocType>[];\n        // A key->document map, used in the event reduce optimization.\n        docsDataMap: Map<string, RxDocType>;\n        docsKeys: string[];\n        docsMap: Map<string, RxDocument<RxDocType>>;\n        docs: RxDocument<RxDocType>[];\n        count: number;\n        /**\n         * Time at which the current _result state was created.\n         * Used to determine if the result set has changed since X\n         * so that we do not emit the same result multiple times on subscription.\n         */\n        time: number;\n    } | null = null;\n\n\n    constructor(\n        public op: RxQueryOP,\n        public mangoQuery: Readonly<MangoQuery<RxDocType>>,\n        public collection: RxCollection<RxDocType>,\n        // used by some plugins\n        public other: any = {}\n    ) {\n        if (!mangoQuery) {\n            this.mangoQuery = _getDefaultQuery();\n        }\n\n        this.isFindOneByIdQuery = isFindOneByIdQuery(\n            this.collection.schema.primaryPath as string,\n            mangoQuery\n        );\n    }\n    get $(): BehaviorSubject<RxQueryResult> {\n        if (!this._$) {\n\n            const results$ = this.collection.$.pipe(\n                /**\n                 * Performance shortcut.\n                 * Changes to local documents are not relevant for the query.\n                 */\n                filter(changeEvent => !changeEvent.isLocal),\n                /**\n                 * Start once to ensure the querying also starts\n                 * when there where no changes.\n                 */\n                startWith(null),\n                // ensure query results are up to date.\n                mergeMap(() => _ensureEqual(this as any)),\n                // use the current result set, written by _ensureEqual().\n                map(() => this._result),\n                // do not run stuff above for each new subscriber, only once.\n                shareReplay(RXJS_SHARE_REPLAY_DEFAULTS),\n                // do not proceed if result set has not changed.\n                distinctUntilChanged((prev, curr) => {\n                    if (prev && prev.time === ensureNotFalsy(curr).time) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }),\n                filter(result => !!result),\n                /**\n                 * Map the result set to a single RxDocument or an array,\n                 * depending on query type\n                 */\n                map((result) => {\n                    const useResult = ensureNotFalsy(result);\n                    if (this.op === 'count') {\n                        return useResult.count;\n                    } else if (this.op === 'findOne') {\n                        // findOne()-queries emit RxDocument or null\n                        return useResult.docs.length === 0 ? null : useResult.docs[0];\n                    } else if (this.op === 'findByIds') {\n                        return useResult.docsMap;\n                    } else {\n                        // find()-queries emit RxDocument[]\n                        // Flat copy the array so it won't matter if the user modifies it.\n                        return useResult.docs.slice(0);\n                    }\n                })\n            );\n\n            this._$ = merge<any>(\n                results$,\n                /**\n                 * Also add the refCount$ to the query observable\n                 * to allow us to count the amount of subscribers.\n                 */\n                this.refCount$.pipe(\n                    filter(() => false)\n                )\n            );\n        }\n        return this._$ as any;\n    }\n\n\n    // stores the changeEvent-number of the last handled change-event\n    public _latestChangeEvent: -1 | number = -1;\n\n    // time stamps on when the last full exec over the database has run\n    // used to properly handle events that happen while the find-query is running\n    public _lastExecStart: number = 0;\n    public _lastExecEnd: number = 0;\n\n    // Fields used for the Limit Buffer when enabled:\n    public _limitBufferSize: number | null = null;\n    public _limitBufferResults: RxDocumentData<RxDocType>[] | null = null;\n\n    // Fields used for the persistent query cache when enabled:\n    public _persistentQueryCacheResult?: string[] | string = undefined;\n    public _persistentQueryCacheResultLwt?: string = undefined; // lwt = latest write time\n    public _persistentQueryCacheLoaded?: Promise<void>;\n    public _persistentQueryCacheBackend?: QueryCacheBackend;\n\n    /**\n     * ensures that the exec-runs\n     * are not run in parallel\n     */\n    public _ensureEqualQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n\n    /**\n     * Returns an observable that emits the results\n     * This should behave like an rxjs-BehaviorSubject which means:\n     * - Emit the current result-set on subscribe\n     * - Emit the new result-set when an RxChangeEvent comes in\n     * - Do not emit anything before the first result-set was created (no null)\n     */\n    public _$?: Observable<RxQueryResult>;\n\n    /**\n     * set the new result-data as result-docs of the query\n     * @param newResultData json-docs that were received from the storage\n     */\n    _setResultData(newResultData: RxDocumentData<RxDocType>[] | number | Map<string, RxDocumentData<RxDocType>>): void {\n        if (typeof newResultData === 'number') {\n            this._result = {\n                docsData: [],\n                docsKeys: [],\n                docsMap: new Map(),\n                docsDataMap: new Map(),\n                count: newResultData,\n                docs: [],\n                time: now()\n            };\n            return;\n        } else if (newResultData instanceof Map) {\n            newResultData = Array.from((newResultData as Map<string, RxDocumentData<RxDocType>>).values());\n        }\n\n        const docsDataMap = new Map();\n        const docsMap = new Map();\n\n\n        const docs = newResultData.map(docData => this.collection._docCache.getCachedRxDocument(docData));\n\n        /**\n         * Instead of using the newResultData in the result cache,\n         * we directly use the objects that are stored in the RxDocument\n         * to ensure we do not store the same data twice and fill up the memory.\n         */\n        const docsKeys: string[] = [];\n        const docsData = docs.map(doc => {\n            docsDataMap.set(doc.primary, doc._data);\n            docsMap.set(doc.primary, doc);\n            docsKeys.push(doc.primary);\n            return doc._data;\n        });\n\n        this._result = {\n            docsData,\n            docsKeys,\n            docsMap,\n            docsDataMap,\n            count: docsData.length,\n            docs,\n            time: now()\n        };\n    }\n\n    /**\n     * executes the query on the database\n     * @return results-array with document-data\n     */\n    async _execOverDatabase(): Promise<RxDocumentData<RxDocType>[] | number> {\n        this._execOverDatabaseCount = this._execOverDatabaseCount + 1;\n        this._lastExecStart = now();\n\n\n        if (this.op === 'count') {\n            const preparedQuery = this.getPreparedQuery();\n            const result = await this.collection.storageInstance.count(preparedQuery);\n            if (result.mode === 'slow' && !this.collection.database.allowSlowCount) {\n                throw newRxError('QU14', {\n                    collection: this.collection,\n                    queryObj: this.mangoQuery\n                });\n            } else {\n                return result.count;\n            }\n        }\n\n        if (this.op === 'findByIds') {\n            const ids: string[] = ensureNotFalsy(this.mangoQuery.selector as any)[this.collection.schema.primaryPath].$in;\n            const ret = new Map<string, RxDocument<RxDocType>>();\n            const mustBeQueried: string[] = [];\n            // first try to fill from docCache\n            ids.forEach(id => {\n                const docData = this.collection._docCache.getLatestDocumentDataIfExists(id);\n                if (docData) {\n                    if (!docData._deleted) {\n                        const doc = this.collection._docCache.getCachedRxDocument(docData);\n                        ret.set(id, doc);\n                    }\n                } else {\n                    mustBeQueried.push(id);\n                }\n            });\n            // everything which was not in docCache must be fetched from the storage\n            if (mustBeQueried.length > 0) {\n                const docs = await this.collection.storageInstance.findDocumentsById(mustBeQueried, false);\n                Object.values(docs).forEach(docData => {\n                    const doc = this.collection._docCache.getCachedRxDocument(docData);\n                    ret.set(doc.primary, doc);\n                });\n            }\n            return ret as any;\n        }\n\n\n        const docsPromise = queryCollection<RxDocType>(this as any);\n        return docsPromise.then(docs => {\n            this._lastExecEnd = now();\n            return docs;\n        });\n    }\n\n    /**\n     * Execute the query\n     * To have an easier implementations,\n     * just subscribe and use the first result\n     */\n    public exec(throwIfMissing: true): Promise<RxDocument<RxDocType>>;\n    public exec(): Promise<RxQueryResult>;\n    public exec(throwIfMissing?: boolean): Promise<any> {\n        if (throwIfMissing && this.op !== 'findOne') {\n            throw newRxError('QU9', {\n                collection: this.collection.name,\n                query: this.mangoQuery,\n                op: this.op\n            });\n        }\n\n\n        /**\n         * run _ensureEqual() here,\n         * this will make sure that errors in the query which throw inside of the RxStorage,\n         * will be thrown at this execution context and not in the background.\n         */\n        return _ensureEqual(this)\n            .then(() => firstValueFrom(this.$))\n            .then(result => {\n                if (!result && throwIfMissing) {\n                    throw newRxError('QU10', {\n                        collection: this.collection.name,\n                        query: this.mangoQuery,\n                        op: this.op\n                    });\n                } else {\n                    return result;\n                }\n            });\n    }\n\n\n\n    /**\n     * cached call to get the queryMatcher\n     * @overwrites itself with the actual value\n     */\n    get queryMatcher(): QueryMatcher<RxDocumentWriteData<RxDocType>> {\n        const schema = this.collection.schema.jsonSchema;\n        const normalizedQuery = normalizeMangoQuery(\n            this.collection.schema.jsonSchema,\n            this.mangoQuery\n        );\n        return overwriteGetterForCaching(\n            this,\n            'queryMatcher',\n            getQueryMatcher(\n                schema,\n                normalizedQuery\n            ) as any\n        );\n    }\n\n    /**\n     * returns a string that is used for equal-comparisons\n     * @overwrites itself with the actual value\n     */\n    toString(): string {\n        const stringObj = sortObject({\n            op: this.op,\n            query: this.mangoQuery,\n            other: this.other\n        }, true);\n        const value = JSON.stringify(stringObj, stringifyFilter);\n        this.toString = () => value;\n        return value;\n    }\n\n    persistentQueryId() {\n        return String(this.collection.database.hashFunction(this.toString()));\n    }\n\n    /**\n     * returns the prepared query\n     * which can be send to the storage instance to query for documents.\n     * @overwrites itself with the actual value.\n     */\n    getPreparedQuery(): PreparedQuery<RxDocType> {\n        const hookInput = {\n            rxQuery: this,\n            // can be mutated by the hooks so we have to deep clone first.\n            mangoQuery: normalizeMangoQuery<RxDocType>(\n                this.collection.schema.jsonSchema,\n                this.mangoQuery\n            )\n        };\n\n        if (this._limitBufferSize !== null && hookInput.mangoQuery.limit) {\n            hookInput.mangoQuery.limit = hookInput.mangoQuery.limit + this._limitBufferSize;\n        }\n\n        runPluginHooks('prePrepareQuery', hookInput);\n\n        const value = this.collection.database.storage.statics.prepareQuery(\n            this.collection.schema.jsonSchema,\n            hookInput.mangoQuery\n        );\n\n        this.getPreparedQuery = () => value;\n        return value;\n    }\n\n    /**\n     * returns true if the document matches the query,\n     * does not use the 'skip' and 'limit'\n     */\n    doesDocumentDataMatch(docData: RxDocType | any): boolean {\n        // if doc is deleted, it cannot match\n        if (docData._deleted) {\n            return false;\n        }\n\n        return this.queryMatcher(docData);\n    }\n\n    /**\n     * deletes all found documents\n     * @return promise with deleted documents\n     */\n    remove(): Promise<RxQueryResult> {\n        return this\n            .exec()\n            .then(docs => {\n                if (Array.isArray(docs)) {\n                    // TODO use a bulk operation instead of running .remove() on each document\n                    return Promise.all(docs.map(doc => doc.remove()));\n                } else {\n                    return (docs as any).remove();\n                }\n            });\n    }\n\n\n    /**\n     * helper function to transform RxQueryBase to RxQuery type\n     */\n    get asRxQuery(): RxQuery<RxDocType, RxQueryResult> {\n        return this as any;\n    }\n\n    /**\n     * updates all found documents\n     * @overwritten by plugin (optional)\n     */\n    update(_updateObj: any): Promise<RxQueryResult> {\n        throw pluginMissing('update');\n    }\n\n\n    // we only set some methods of query-builder here\n    // because the others depend on these ones\n    where(_queryObj: MangoQuerySelector<RxDocType> | keyof RxDocType | string): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    sort(_params: string | MangoQuerySortPart<RxDocType>): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    skip(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n    limit(_amount: number | null): RxQuery<RxDocType, RxQueryResult> {\n        throw pluginMissing('query-builder');\n    }\n\n    enableLimitBuffer(bufferSize: number) {\n        if (this._limitBufferSize !== null) {\n            // Limit buffer has already been enabled, do nothing:\n            return this;\n        }\n        if (this._lastExecStart !== 0) {\n            console.error('Can\\'t use limit buffer if query has already executed');\n            return this;\n        }\n        if (this.mangoQuery.skip || !this.mangoQuery.limit) {\n            console.error('Right now, limit buffer only works on non-skip, limit queries.');\n            return this;\n        }\n        this._limitBufferSize = bufferSize;\n        return this;\n    }\n\n    enablePersistentQueryCache(backend: QueryCacheBackend) {\n        if (this._persistentQueryCacheBackend) {\n            // We've already tried to enable the query cache\n            return this;\n        }\n        this._persistentQueryCacheBackend = backend;\n        this._persistentQueryCacheLoaded = this._restoreQueryCacheFromPersistedState();\n        return this;\n    }\n\n    private async _restoreQueryCacheFromPersistedState() {\n        if (!this._persistentQueryCacheBackend) {\n            // no cache backend provided, do nothing\n            return;\n        }\n        if (this._persistentQueryCacheResult) {\n            // we already restored the cache once, no need to run twice\n            return;\n        }\n        if (this.mangoQuery.skip || this.op === 'count') {\n            console.error('The persistent query cache only works on non-skip, non-count queries.');\n            return;\n        }\n\n        // First, check if there are any query results persisted:\n        const persistentQueryId = this.persistentQueryId();\n        const value = await this._persistentQueryCacheBackend.getItem<string[] | string>(`qc:${persistentQueryId}`);\n        if (!value || !Array.isArray(value) || value.length === 0) {\n            // eslint-disable-next-line no-console\n            console.log(`no persistent query cache found in the backend, returning early ${this.toString()}`);\n            return;\n        }\n\n        // If there are persisted ids, create our two Sets of ids from the cache:\n        const persistedQueryCacheIds = new Set<string>();\n        const limitBufferIds = new Set<string>();\n\n        for (const id of value) {\n            if (id.startsWith('lb-')) {\n                limitBufferIds.add(id.replace('lb-', ''));\n            } else {\n                persistedQueryCacheIds.add(id);\n            }\n        }\n\n        // eslint-disable-next-line no-console\n        console.time(`Restoring persistent querycache ${this.toString()}`);\n\n        // Next, pull the lwt from the cache:\n        // TODO: if lwt is too old, should we just give up here? What if there are too many changedDocs?\n        const lwt = (await this._persistentQueryCacheBackend.getItem(`qc:${persistentQueryId}:lwt`)) as string | null;\n        if (!lwt) {\n            return;\n        }\n\n        // If the query was persisted too long ago, just re-execute it.\n        if (now() - Number(lwt) > RESTORE_QUERY_MAX_TIME_AGO) {\n            return;\n        }\n\n        const primaryPath = this.collection.schema.primaryPath;\n\n        const {documents: changedDocs} = await this.collection.storageInstance.getChangedDocumentsSince(\n          RESTORE_QUERY_MAX_DOCS_CHANGED,\n          // make sure we remove the monotonic clock (xxx.01, xxx.02) from the lwt timestamp to avoid issues with\n          // lookups in indices (dexie)\n          {id: '', lwt: Math.floor(Number(lwt)) - RESTORE_QUERY_UPDATE_DRIFT}\n        );\n\n        // If too many docs have changed, just give up and re-execute the query\n        if (changedDocs.length === RESTORE_QUERY_MAX_DOCS_CHANGED) {\n            return;\n        }\n\n        const changedDocIds = new Set<string>(changedDocs.map((d) => d[primaryPath] as string));\n\n        const docIdsWeNeedToFetch = [...persistedQueryCacheIds, ...limitBufferIds].filter((id) => !changedDocIds.has(id));\n\n        // We use _queryCollectionByIds to fetch the remaining docs we need efficiently, pulling\n        // from query cache if we can (and the storageInstance by ids if we can't):\n        const otherPotentialMatchingDocs: RxDocumentData<RxDocType>[] = [];\n        await _queryCollectionByIds(this as any, otherPotentialMatchingDocs, docIdsWeNeedToFetch);\n\n        // Now that we have all potential documents, we just filter (in-memory) the ones that still match our query:\n        let docsData: RxDocumentData<RxDocType>[] = [];\n        for (const doc of changedDocs.concat(otherPotentialMatchingDocs)) {\n            if (this.doesDocumentDataMatch(doc)) {\n                docsData.push(doc);\n            }\n        }\n\n        // Sort the documents by the query's sort field:\n        const normalizedMangoQuery = normalizeMangoQuery<RxDocType>(\n          this.collection.schema.jsonSchema,\n          this.mangoQuery\n        );\n        const sortComparator = getSortComparator(this.collection.schema.jsonSchema, normalizedMangoQuery);\n        const limit = normalizedMangoQuery.limit ? normalizedMangoQuery.limit : Infinity;\n        docsData = docsData.sort(sortComparator);\n\n        // We know for sure that all persisted and limit buffer ids (and changed docs before them) are in the correct\n        // result set. And we can't be sure about any past that point. So cut it off there:\n        const lastValidIndex = docsData.findLastIndex((d) => limitBufferIds.has(d[primaryPath] as string) || persistedQueryCacheIds.has(d[primaryPath] as string));\n        docsData = docsData.slice(0, lastValidIndex + 1);\n\n        // Now this is the trickiest part.\n        // If we somehow have fewer docs than the limit of our query\n        // (and this wasn't the case because before persistence)\n        // then there is no way for us to know the correct results, and we re-exec:\n        const unchangedItemsMayNowBeInResults = (\n            this.mangoQuery.limit &&\n            docsData.length < this.mangoQuery.limit &&\n            persistedQueryCacheIds.size >= this.mangoQuery.limit\n        );\n        if (unchangedItemsMayNowBeInResults) {\n            return;\n        }\n\n        // Our finalResults are the actual results of this query, and pastLimitItems are any remaining matching\n        // documents we have left over (past the limit).\n        const pastLimitItems = docsData.slice(limit);\n        const finalResults = docsData.slice(0, limit);\n\n        // If there are still items past the first LIMIT items, try to restore the limit buffer with them:\n        if (limitBufferIds.size && pastLimitItems.length > 0) {\n            this._limitBufferResults = pastLimitItems;\n        } else {\n            this._limitBufferResults = [];\n        }\n\n        // Finally, set the query's results to what we've pulled from disk:\n        this._lastEnsureEqual = now();\n        this._latestChangeEvent = this.collection._changeEventBuffer.counter;\n        this._setResultData(finalResults);\n\n        // eslint-disable-next-line no-console\n        console.timeEnd(`Restoring persistent querycache ${this.toString()}`);\n    }\n}\n\nexport function _getDefaultQuery<RxDocType>(): MangoQuery<RxDocType> {\n    return {\n        selector: {}\n    };\n}\n\n/**\n * run this query through the QueryCache\n */\nexport function tunnelQueryCache<RxDocumentType, RxQueryResult>(\n    rxQuery: RxQueryBase<RxDocumentType, RxQueryResult>\n): RxQuery<RxDocumentType, RxQueryResult> {\n    return rxQuery.collection._queryCache.getByQuery(rxQuery as any);\n}\n\nexport function createRxQuery<RxDocType>(\n    op: RxQueryOP,\n    queryObj: MangoQuery<RxDocType>,\n    collection: RxCollection<RxDocType>,\n    other?: any\n) {\n    runPluginHooks('preCreateRxQuery', {\n        op,\n        queryObj,\n        collection,\n        other\n    });\n\n    let ret = new RxQueryBase<RxDocType>(op, queryObj, collection, other);\n\n    // ensure when created with same params, only one is created\n    ret = tunnelQueryCache(ret);\n    // TODO: clear persistent query cache as well\n    triggerCacheReplacement(collection);\n\n    return ret;\n}\n\n/**\n * Check if the current results-state is in sync with the database\n * which means that no write event happened since the last run.\n * @return false if not which means it should re-execute\n */\nfunction _isResultsInSync(rxQuery: RxQueryBase<any>): boolean {\n    const currentLatestEventNumber = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n    if (rxQuery._latestChangeEvent >= currentLatestEventNumber) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n/**\n * wraps __ensureEqual()\n * to ensure it does not run in parallel\n * @return true if has changed, false if not\n */\nfunction _ensureEqual(rxQuery: RxQueryBase<any>): Promise<boolean> {\n    // Optimisation shortcut\n    if (\n        rxQuery.collection.database.destroyed ||\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    rxQuery._ensureEqualQueue = rxQuery._ensureEqualQueue\n        .then(() => __ensureEqual(rxQuery));\n    return rxQuery._ensureEqualQueue;\n}\n\n\n/**\n * ensures that the results of this query is equal to the results which a query over the database would give\n * @return true if results have changed\n */\nasync function __ensureEqual<RxDocType>(rxQuery: RxQueryBase<RxDocType>): Promise<boolean> {\n    await rxQuery._persistentQueryCacheLoaded;\n\n    rxQuery._lastEnsureEqual = now();\n\n    /**\n     * Optimisation shortcuts\n     */\n    if (\n        // db is closed\n        rxQuery.collection.database.destroyed ||\n        // nothing happened since last run\n        _isResultsInSync(rxQuery)\n    ) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n\n    let ret = false;\n    let mustReExec = false; // if this becomes true, a whole execution over the database is made\n    if (rxQuery._latestChangeEvent === -1) {\n        // have not executed yet -> must run\n        mustReExec = true;\n    }\n\n    /**\n     * try to use EventReduce to calculate the new results\n     */\n    if (!mustReExec) {\n        const missedChangeEvents = rxQuery.asRxQuery.collection._changeEventBuffer.getFrom(rxQuery._latestChangeEvent + 1);\n        if (missedChangeEvents === null) {\n            // changeEventBuffer is of bounds -> we must re-execute over the database\n            mustReExec = true;\n        } else {\n            rxQuery._latestChangeEvent = rxQuery.asRxQuery.collection._changeEventBuffer.counter;\n\n            const runChangeEvents: RxChangeEvent<any>[] = rxQuery.asRxQuery.collection\n                ._changeEventBuffer\n                .reduceByLastOfDoc(missedChangeEvents);\n\n            if (rxQuery._limitBufferResults !== null) {\n                // Check if any item in our limit buffer was modified by a change event\n                for (const cE of runChangeEvents) {\n                    if (rxQuery._limitBufferResults.find((doc) => doc[rxQuery.collection.schema.primaryPath] === cE.documentId)) {\n                        // If so, the limit buffer is potential invalid -- let's just blow it up\n                        // TODO: could we instead update the documents in the limit buffer?\n                        rxQuery._limitBufferResults = null;\n                        break;\n                    }\n                }\n            }\n\n            if (rxQuery.op === 'count') {\n                // 'count' query\n                const previousCount = ensureNotFalsy(rxQuery._result).count;\n                let newCount = previousCount;\n                runChangeEvents.forEach(cE => {\n                    const didMatchBefore = cE.previousDocumentData && rxQuery.doesDocumentDataMatch(cE.previousDocumentData);\n                    const doesMatchNow = rxQuery.doesDocumentDataMatch(cE.documentData);\n\n                    if (!didMatchBefore && doesMatchNow) {\n                        newCount++;\n                    }\n                    if (didMatchBefore && !doesMatchNow) {\n                        newCount--;\n                    }\n                });\n                if (newCount !== previousCount) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newCount as any);\n                }\n            } else {\n                // 'find' or 'findOne' query\n                const eventReduceResult = calculateNewResults(\n                    rxQuery as any,\n                    runChangeEvents\n                );\n                if (eventReduceResult.runFullQueryAgain) {\n                    // could not calculate the new results, execute must be done\n                    mustReExec = true;\n                } else if (eventReduceResult.changed) {\n                    // we got the new results, we do not have to re-execute, mustReExec stays false\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(eventReduceResult.newResults as any);\n                }\n            }\n        }\n    }\n\n\n    // oh no we have to re-execute the whole query over the database\n    if (mustReExec) {\n        // counter can change while _execOverDatabase() is running so we save it here\n        const latestAfter: number = (rxQuery as any).collection._changeEventBuffer.counter;\n        return rxQuery._execOverDatabase()\n            .then(newResultData => {\n                rxQuery._latestChangeEvent = latestAfter;\n\n                // A count query needs a different has-changed check.\n                if (typeof newResultData === 'number') {\n                    if (\n                        !rxQuery._result ||\n                        newResultData !== rxQuery._result.count\n                    ) {\n                        ret = true;\n                        rxQuery._setResultData(newResultData as any);\n                    }\n                    return ret;\n                }\n                if (\n                    !rxQuery._result ||\n                    !areRxDocumentArraysEqual(\n                        rxQuery.collection.schema.primaryPath,\n                        newResultData,\n                        rxQuery._result.docsData\n                    )\n                ) {\n                    ret = true; // true because results changed\n                    rxQuery._setResultData(newResultData as any);\n                }\n                return ret;\n            })\n            .then(async (returnValue) => {\n                await updatePersistentQueryCache(rxQuery);\n                return returnValue;\n            });\n    }\n\n    return ret; // true if results have changed\n}\n\n\nasync function updatePersistentQueryCache<RxDocType>(rxQuery: RxQueryBase<RxDocType>) {\n    if (!rxQuery._persistentQueryCacheBackend) {\n        return;\n    }\n\n    const backend = rxQuery._persistentQueryCacheBackend;\n\n    const key = rxQuery.persistentQueryId();\n\n    // update _persistedQueryCacheResult\n    rxQuery._persistentQueryCacheResult = rxQuery._result?.docsKeys ?? [];\n\n    const idsToPersist = [...rxQuery._persistentQueryCacheResult];\n    if (rxQuery._limitBufferResults) {\n        rxQuery._limitBufferResults.forEach((d) => {\n            idsToPersist.push(`lb-${d[rxQuery.collection.schema.primaryPath]}`);\n        });\n    }\n    // eslint-disable-next-line no-console\n    console.time(`Query persistence: persisting results of ${JSON.stringify(rxQuery.mangoQuery)}`);\n    // persist query cache\n    const lwt = rxQuery._result?.time ?? RX_META_LWT_MINIMUM;\n\n    await Promise.all([\n        backend.setItem(`qc:${String(key)}`, idsToPersist),\n        backend.setItem(`qc:${String(key)}:lwt`, lwt.toString()),\n    ]);\n\n    // eslint-disable-next-line no-console\n    console.timeEnd(`Query persistence: persisting results of ${JSON.stringify(rxQuery.mangoQuery)}`);\n}\n\n\n// Refactored out of `queryCollection`: modifies the docResults array to fill it with data\nasync function _queryCollectionByIds<RxDocType>(rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>, docResults: RxDocumentData<RxDocType>[], docIds: string[]) {\n    const collection = rxQuery.collection;\n    docIds = docIds.filter(docId => {\n        // first try to fill from docCache\n        const docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n        if (docData) {\n            if (!docData._deleted) {\n                docResults.push(docData);\n            }\n            return false;\n        } else {\n            return true;\n        }\n    });\n\n    // otherwise get from storage\n    if (docIds.length > 0) {\n        const docsMap = await collection.storageInstance.findDocumentsById(docIds, false);\n        Object.values(docsMap).forEach(docData => {\n            docResults.push(docData);\n        });\n    }\n}\n\n/**\n * Runs the query over the storage instance\n * of the collection.\n * Does some optimizations to ensure findById is used\n * when specific queries are used.\n */\nexport async function queryCollection<RxDocType>(\n    rxQuery: RxQuery<RxDocType> | RxQueryBase<RxDocType>\n): Promise<RxDocumentData<RxDocType>[]> {\n    await rxQuery._persistentQueryCacheLoaded;\n\n    let docs: RxDocumentData<RxDocType>[] = [];\n    const collection = rxQuery.collection;\n\n    /**\n     * Optimizations shortcut.\n     * If query is find-one-document-by-id,\n     * then we do not have to use the slow query() method\n     * but instead can use findDocumentsById()\n     */\n    if (rxQuery.isFindOneByIdQuery) {\n        if (Array.isArray(rxQuery.isFindOneByIdQuery)) {\n            await _queryCollectionByIds(rxQuery, docs, rxQuery.isFindOneByIdQuery);\n        } else {\n            const docId = rxQuery.isFindOneByIdQuery;\n\n            // first try to fill from docCache\n            let docData = rxQuery.collection._docCache.getLatestDocumentDataIfExists(docId);\n            if (!docData) {\n                // otherwise get from storage\n                const docsMap = await collection.storageInstance.findDocumentsById([docId], false);\n                if (docsMap.hasOwnProperty(docId)) {\n                    docData = docsMap[docId];\n                }\n            }\n            if (docData && !docData._deleted) {\n                docs.push(docData);\n            }\n        }\n    } else {\n        const preparedQuery = rxQuery.getPreparedQuery();\n        const queryResult = await collection.storageInstance.query(preparedQuery);\n        if (rxQuery._limitBufferSize !== null && rxQuery.mangoQuery.limit && queryResult.documents.length > rxQuery.mangoQuery.limit) {\n            // If there are more than query.limit results, we pull out our buffer items from the\n            // last rxQuery._limitBufferSize items of the results.\n            rxQuery._limitBufferResults = queryResult.documents.splice(rxQuery.mangoQuery.limit);\n        }\n        docs = queryResult.documents;\n    }\n    return docs;\n}\n\n/**\n * Returns true if the given query\n * selects exactly one document by its id.\n * Used to optimize performance because these kind of\n * queries do not have to run over an index and can use get-by-id instead.\n * Returns false if no query of that kind.\n * Returns the document id otherwise.\n */\nexport function isFindOneByIdQuery(\n    primaryPath: string,\n    query: MangoQuery<any>\n): false | string | string[] {\n    // must have exactly one operator which must be $eq || $in\n    if (\n        !query.skip &&\n        query.selector &&\n        Object.keys(query.selector).length === 1 &&\n        query.selector[primaryPath]\n    ) {\n        const value: any = query.selector[primaryPath];\n        if (typeof value === 'string') {\n            return value;\n        } else if (\n            Object.keys(value).length === 1 &&\n            typeof value.$eq === 'string'\n        ) {\n            return value.$eq;\n        }\n\n        // same with $in string arrays\n        if (\n            Object.keys(value).length === 1 &&\n            Array.isArray(value.$eq) &&\n            // must only contain strings\n            !(value.$eq as any[]).find(r => typeof r !== 'string')\n        ) {\n            return value.$eq;\n        }\n    }\n    return false;\n}\n\n\nexport function isRxQuery(obj: any): boolean {\n    return obj instanceof RxQueryBase;\n}\n"],"mappings":"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"}