{"version":3,"file":"rx-storage-instance-loki.js","names":["Subject","flatClone","now","ensureNotFalsy","isMaybeReadonlyArray","getFromMapOrThrow","hasDeepProperty","RXDB_UTILS_GLOBAL","defaultHashSha256","PREMIUM_FLAG_HASH","newRxError","closeLokiCollections","getLokiDatabase","OPEN_LOKIJS_STORAGE_INSTANCES","LOKIJS_COLLECTION_DEFAULT_OPTIONS","stripLokiKey","getLokiSortComparator","getLokiLeaderElector","requestRemoteInstance","mustUseLocalState","handleRemoteRequest","RX_STORAGE_NAME_LOKIJS","transformRegexToRegExp","getPrimaryFieldOfPrimaryKey","categorizeBulkWriteRows","addRxStorageMultiInstanceSupport","removeBroadcastChannelReference","getQueryMatcher","instanceId","shownNonPremiumLog","RxStorageInstanceLoki","databaseInstanceToken","storage","databaseName","collectionName","schema","internals","options","databaseSettings","changes$","primaryPath","primaryKey","add","leaderElector","copiedSelf","bulkWrite","bind","changeStream","cleanup","close","query","count","findDocumentsById","conflictResultionTasks","getAttachmentData","remove","resolveConflictResultionTask","awaitLeadership","then","broadcastChannel","addEventListener","msg","catch","_proto","prototype","documentWrites","context","premium","console","warn","join","length","args","localState","ret","success","error","docsInDb","Map","docsInDbWithLokiKey","forEach","writeRow","id","document","documentInDb","collection","by","set","categorized","errors","bulkInsertDocs","insert","push","bulkUpdateDocs","docId","documentInDbWithLokiKey","writeDoc","Object","assign","$loki","update","databaseState","saveQueue","addWrite","eventBulk","events","lastState","newestRow","checkpoint","lwt","_meta","endTime","next","ids","deleted","_deleted","preparedQueryOriginal","preparedQuery","selector","skip","limit","Infinity","skipPlusLimit","mustRunMatcher","lokiQuery","chain","find","sort","foundDocuments","data","map","lokiDoc","queryMatcher","filter","d","slice","documents","result","mode","_documentId","_attachmentId","_digest","Error","asObservable","minimumDeletedTime","deleteAmountPerRun","maxDeletionTime","$lt","closed","complete","delete","dbState","run","database","removeCollection","name","_taskSolution","createLokiLocalState","params","indices","indexes","idx","lokiCollectionName","version","collectionOptions","unique","addCollection","collections","createLokiStorageInstance","broadcastChannelRefObject","multiInstance","instance","undefined","closeBefore","removeBefore"],"sources":["../../../../src/plugins/storage-lokijs/rx-storage-instance-loki.ts"],"sourcesContent":["import {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    flatClone,\n    now,\n    ensureNotFalsy,\n    isMaybeReadonlyArray,\n    getFromMapOrThrow,\n    hasDeepProperty,\n    RXDB_UTILS_GLOBAL,\n    defaultHashSha256,\n    PREMIUM_FLAG_HASH\n} from '../utils/index.ts';\nimport { newRxError } from '../../rx-error.ts';\nimport type {\n    RxStorageInstance,\n    LokiSettings,\n    RxStorageChangeEvent,\n    RxDocumentData,\n    BulkWriteRow,\n    RxStorageBulkWriteResponse,\n    RxStorageQueryResult,\n    RxJsonSchema,\n    MangoQuery,\n    LokiStorageInternals,\n    RxStorageInstanceCreationParams,\n    LokiDatabaseSettings,\n    LokiLocalDatabaseState,\n    EventBulk,\n    StringKeys,\n    DeepReadonly,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxStorageDefaultCheckpoint,\n    RxStorageCountResult,\n    PreparedQuery\n} from '../../types/index.d.ts';\nimport {\n    closeLokiCollections,\n    getLokiDatabase,\n    OPEN_LOKIJS_STORAGE_INSTANCES,\n    LOKIJS_COLLECTION_DEFAULT_OPTIONS,\n    stripLokiKey,\n    getLokiSortComparator,\n    getLokiLeaderElector,\n    requestRemoteInstance,\n    mustUseLocalState,\n    handleRemoteRequest,\n    RX_STORAGE_NAME_LOKIJS,\n    transformRegexToRegExp\n} from './lokijs-helper.ts';\nimport type { RxStorageLoki } from './rx-storage-lokijs.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport { categorizeBulkWriteRows } from '../../rx-storage-helper.ts';\nimport {\n    addRxStorageMultiInstanceSupport,\n    removeBroadcastChannelReference\n} from '../../rx-storage-multiinstance.ts';\nimport { getQueryMatcher } from '../../rx-query-helper.ts';\n\nlet instanceId = now();\nlet shownNonPremiumLog = false;\n\nexport class RxStorageInstanceLoki<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    LokiStorageInternals,\n    LokiSettings,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    private changes$: Subject<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> = new Subject();\n    public readonly instanceId = instanceId++;\n\n    public closed?: Promise<void>;\n\n    constructor(\n        public readonly databaseInstanceToken: string,\n        public readonly storage: RxStorageLoki,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: LokiStorageInternals,\n        public readonly options: Readonly<LokiSettings>,\n        public readonly databaseSettings: LokiDatabaseSettings\n    ) {\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n        OPEN_LOKIJS_STORAGE_INSTANCES.add(this);\n        if (this.internals.leaderElector) {\n\n\n            /**\n             * To run handleRemoteRequest(),\n             * the instance will call its own methods.\n             * But these methods could have already been swapped out by a RxStorageWrapper\n             * so we must store the original methods here and use them instead.\n             */\n            const copiedSelf: RxStorageInstance<RxDocType, any, any> = {\n                bulkWrite: this.bulkWrite.bind(this),\n                changeStream: this.changeStream.bind(this),\n                cleanup: this.cleanup.bind(this),\n                close: this.close.bind(this),\n                query: this.query.bind(this),\n                count: this.count.bind(this),\n                findDocumentsById: this.findDocumentsById.bind(this),\n                collectionName: this.collectionName,\n                databaseName: this.databaseName,\n                conflictResultionTasks: this.conflictResultionTasks.bind(this),\n                getAttachmentData: this.getAttachmentData.bind(this),\n                internals: this.internals,\n                options: this.options,\n                remove: this.remove.bind(this),\n                resolveConflictResultionTask: this.resolveConflictResultionTask.bind(this),\n                schema: this.schema\n            };\n\n            this.internals.leaderElector.awaitLeadership().then(() => {\n                // this instance is leader now, so it has to reply to queries from other instances\n                ensureNotFalsy(this.internals.leaderElector).broadcastChannel\n                    .addEventListener('message', (msg) => handleRemoteRequest(copiedSelf as any, msg));\n            }).catch(() => { });\n        }\n    }\n\n    async bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n\n\n        if (\n            !shownNonPremiumLog &&\n            (\n                !RXDB_UTILS_GLOBAL.premium ||\n                typeof RXDB_UTILS_GLOBAL.premium !== 'string' ||\n                (await defaultHashSha256(RXDB_UTILS_GLOBAL.premium) !== PREMIUM_FLAG_HASH)\n            )\n        ) {\n            console.warn(\n                [\n                    '-------------- RxDB Open Core RxStorage -------------------------------',\n                    'You are using the free LokiJS based RxStorage implementation from RxDB https://rxdb.info/rx-storage-lokijs.html?console=loki ',\n                    'While this is a great option, we want to let you know that there are faster storage solutions available in our premium plugins.',\n                    'For professional users and production environments, we highly recommend considering these premium options to enhance performance and reliability.',\n                    ' https://rxdb.info/premium?console=loki ',\n                    'If you already purchased premium access you can disable this log by calling the setPremiumFlag() function from rxdb-premium/plugins/shared.',\n                    '---------------------------------------------------------------------'\n                ].join('\\n')\n            );\n            shownNonPremiumLog = true;\n        } else {\n            shownNonPremiumLog = true;\n        }\n\n        if (documentWrites.length === 0) {\n            throw newRxError('P2', {\n                args: {\n                    documentWrites\n                }\n            });\n        }\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'bulkWrite', [documentWrites]);\n        }\n\n        const ret: RxStorageBulkWriteResponse<RxDocType> = {\n            success: [],\n            error: []\n        };\n\n        const docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>], RxDocumentData<RxDocType>> = new Map();\n        const docsInDbWithLokiKey: Map<\n            RxDocumentData<RxDocType>[StringKeys<RxDocType>],\n            RxDocumentData<RxDocType> & { $loki: number; }\n        > = new Map();\n        documentWrites.forEach(writeRow => {\n            const id = writeRow.document[this.primaryPath];\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (documentInDb) {\n                docsInDbWithLokiKey.set(id as any, documentInDb);\n                docsInDb.set(id as any, stripLokiKey(documentInDb));\n            }\n        });\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            this.primaryPath as any,\n            docsInDb,\n            documentWrites,\n            context\n        );\n        ret.error = categorized.errors;\n\n        categorized.bulkInsertDocs.forEach(writeRow => {\n            localState.collection.insert(flatClone(writeRow.document));\n            ret.success.push(writeRow.document);\n        });\n        categorized.bulkUpdateDocs.forEach(writeRow => {\n            const docId = writeRow.document[this.primaryPath];\n            const documentInDbWithLokiKey = getFromMapOrThrow(docsInDbWithLokiKey, docId as any);\n            const writeDoc: any = Object.assign(\n                {},\n                writeRow.document,\n                {\n                    $loki: documentInDbWithLokiKey.$loki\n                }\n            );\n            localState.collection.update(writeDoc);\n            ret.success.push(writeRow.document);\n        });\n        localState.databaseState.saveQueue.addWrite();\n\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[this.primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            categorized.eventBulk.endTime = now();\n            this.changes$.next(categorized.eventBulk);\n        }\n\n        return ret;\n    }\n    async findDocumentsById(ids: string[], deleted: boolean): Promise<RxDocumentData<RxDocType>[]> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'findDocumentsById', [ids, deleted]);\n        }\n\n        const ret: RxDocumentData<RxDocType>[] = [];\n        ids.forEach(id => {\n            const documentInDb = localState.collection.by(this.primaryPath, id);\n            if (\n                documentInDb &&\n                (!documentInDb._deleted || deleted)\n            ) {\n                ret.push(stripLokiKey(documentInDb));\n            }\n        });\n        return ret;\n    }\n    async query(preparedQueryOriginal: PreparedQuery<RxDocType>): Promise<RxStorageQueryResult<RxDocType>> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'query', [preparedQueryOriginal]);\n        }\n\n        let preparedQuery = ensureNotFalsy(preparedQueryOriginal.query);\n        if (preparedQuery.selector) {\n            preparedQuery = flatClone(preparedQuery);\n            preparedQuery.selector = transformRegexToRegExp(preparedQuery.selector);\n        }\n\n        const query = preparedQueryOriginal.query;\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        /**\n         * LokiJS is not able to give correct results for some\n         * operators, so we have to check all documents in that case\n         * and laster apply skip and limit manually.\n         * @link https://github.com/pubkey/rxdb/issues/5320\n         */\n        let mustRunMatcher = false;\n        if (hasDeepProperty(preparedQuery.selector, '$in')) {\n            mustRunMatcher = true;\n        }\n\n\n        let lokiQuery = localState.collection\n            .chain()\n            .find(mustRunMatcher ? {} : preparedQuery.selector);\n\n        if (preparedQuery.sort) {\n            lokiQuery = lokiQuery.sort(getLokiSortComparator(this.schema, preparedQuery));\n        }\n\n\n        let foundDocuments = lokiQuery.data().map((lokiDoc: any) => stripLokiKey(lokiDoc));\n\n\n        /**\n         * LokiJS returned wrong results on some queries\n         * with complex indexes. Therefore we run the query-match\n         * over all result docs to patch this bug.\n         * TODO create an issue at the LokiJS repository.\n         */\n        const queryMatcher = getQueryMatcher(\n            this.schema,\n            preparedQuery as any\n        );\n        foundDocuments = foundDocuments.filter((d: any) => queryMatcher(d));\n\n        // always apply offset and limit like this, because\n        // sylvieQuery.offset() and sylvieQuery.limit() results were inconsistent\n        foundDocuments = foundDocuments.slice(skip, skipPlusLimit);\n\n        return {\n            documents: foundDocuments\n        };\n    }\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n    getAttachmentData(_documentId: string, _attachmentId: string, _digest: string): Promise<string> {\n        throw new Error('Attachments are not implemented in the lokijs RxStorage. Make a pull request.');\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        return this.changes$.asObservable();\n    }\n\n    async cleanup(minimumDeletedTime: number): Promise<boolean> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'cleanup', [minimumDeletedTime]);\n        }\n\n        const deleteAmountPerRun = 10;\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const query = localState.collection\n            .chain()\n            .find({\n                _deleted: true,\n                '_meta.lwt': {\n                    $lt: maxDeletionTime\n                }\n            }).limit(deleteAmountPerRun);\n        const foundDocuments = query.data();\n        if (foundDocuments.length > 0) {\n            localState.collection.remove(foundDocuments);\n            localState.databaseState.saveQueue.addWrite();\n        }\n\n        return foundDocuments.length !== deleteAmountPerRun;\n    }\n\n    async close(): Promise<void> {\n        if (this.closed) {\n            return this.closed;\n        }\n        this.closed = (async () => {\n            this.changes$.complete();\n            OPEN_LOKIJS_STORAGE_INSTANCES.delete(this);\n            if (this.internals.localState) {\n                const localState = await this.internals.localState;\n                const dbState = await getLokiDatabase(\n                    this.databaseName,\n                    this.databaseSettings\n                );\n                await dbState.saveQueue.run();\n                await closeLokiCollections(\n                    this.databaseName,\n                    [\n                        localState.collection\n                    ]\n                );\n            }\n        })();\n        return this.closed;\n    }\n    async remove(): Promise<void> {\n        const localState = await mustUseLocalState(this);\n        if (!localState) {\n            return requestRemoteInstance(this, 'remove', []);\n        }\n        localState.databaseState.database.removeCollection(localState.collection.name);\n        await localState.databaseState.saveQueue.run();\n        return this.close();\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return new Subject();\n    }\n    async resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> { }\n\n}\n\nexport async function createLokiLocalState<RxDocType>(\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<LokiLocalDatabaseState> {\n    if (!params.options) {\n        params.options = {};\n    }\n\n    const databaseState = await getLokiDatabase(\n        params.databaseName,\n        databaseSettings\n    );\n\n    /**\n     * Construct loki indexes from RxJsonSchema indexes.\n     * TODO what about compound indexes? Are they possible in lokijs?\n     */\n    const indices: string[] = [];\n    if (params.schema.indexes) {\n        params.schema.indexes.forEach(idx => {\n            if (!isMaybeReadonlyArray(idx)) {\n                indices.push(idx);\n            }\n        });\n    }\n    /**\n     * LokiJS has no concept of custom primary key, they use a number-id that is generated.\n     * To be able to query fast by primary key, we always add an index to the primary.\n     */\n    const primaryKey = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\n    indices.push(primaryKey as string);\n\n    const lokiCollectionName = params.collectionName + '-' + params.schema.version;\n    const collectionOptions: Partial<any> = Object.assign(\n        {},\n        lokiCollectionName,\n        {\n            indices: indices as string[],\n            unique: [primaryKey]\n        } as any,\n        LOKIJS_COLLECTION_DEFAULT_OPTIONS\n    );\n\n    const collection: any = databaseState.database.addCollection(\n        lokiCollectionName,\n        collectionOptions as any\n    );\n    databaseState.collections[params.collectionName] = collection;\n    const ret: LokiLocalDatabaseState = {\n        databaseState,\n        collection\n    };\n\n    return ret;\n}\n\n\nexport async function createLokiStorageInstance<RxDocType>(\n    storage: RxStorageLoki,\n    params: RxStorageInstanceCreationParams<RxDocType, LokiSettings>,\n    databaseSettings: LokiDatabaseSettings\n): Promise<RxStorageInstanceLoki<RxDocType>> {\n    const internals: LokiStorageInternals = {};\n\n    const broadcastChannelRefObject: DeepReadonly<any> = {};\n\n\n    if (params.multiInstance) {\n        const leaderElector = getLokiLeaderElector(\n            params.databaseInstanceToken,\n            broadcastChannelRefObject,\n            params.databaseName\n        );\n        internals.leaderElector = leaderElector;\n    } else {\n        // optimisation shortcut, directly create db is non multi instance.\n        internals.localState = createLokiLocalState(params, databaseSettings);\n        await internals.localState;\n    }\n\n    const instance = new RxStorageInstanceLoki(\n        params.databaseInstanceToken,\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        databaseSettings\n    );\n\n    await addRxStorageMultiInstanceSupport(\n        RX_STORAGE_NAME_LOKIJS,\n        params,\n        instance,\n        internals.leaderElector ? internals.leaderElector.broadcastChannel : undefined\n    );\n\n    if (params.multiInstance) {\n        /**\n         * Clean up the broadcast-channel reference on close()\n         */\n        const closeBefore = instance.close.bind(instance);\n        instance.close = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return closeBefore();\n        };\n        const removeBefore = instance.remove.bind(instance);\n        instance.remove = function () {\n            removeBroadcastChannelReference(\n                params.databaseInstanceToken,\n                broadcastChannelRefObject\n            );\n            return removeBefore();\n        };\n\n        /**\n         * Directly create the localState when/if the db becomes leader.\n         */\n        ensureNotFalsy(internals.leaderElector)\n            .awaitLeadership()\n            .then(() => {\n                if (!instance.closed) {\n                    mustUseLocalState(instance);\n                }\n            });\n    }\n\n\n    return instance;\n}\n"],"mappings":"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","ignoreList":[]}